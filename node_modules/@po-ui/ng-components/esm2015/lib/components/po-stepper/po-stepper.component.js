import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { Observable, of, throwError } from 'rxjs';
import { take, tap, catchError } from 'rxjs/operators';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
export class PoStepperComponent extends PoStepperBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    get currentStepIndex() {
        return this.step - 1;
    }
    get stepList() {
        return (this.usePoSteps && this.poSteps) || this.steps;
    }
    get usePoSteps() {
        return !!this.poSteps.length;
    }
    ngAfterContentInit() {
        this.activeFirstStep();
        this.poSteps.changes.subscribe(() => {
            this.controlStepsStatus(0, this.poSteps.first);
        });
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index) {
        if (!this.usePoSteps) {
            return;
        }
        const stepsArray = this.getPoSteps();
        const step = stepsArray[index];
        const isDisabledStep = step.status === PoStepperStatus.Disabled;
        const isErrorStep = step.status === PoStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first() {
        if (!this.usePoSteps) {
            return;
        }
        const firstStep = this.poSteps.first;
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const nextIndex = stepIndex + 1;
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        const previousIndex = stepIndex - 1;
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    changeStep(stepIndex, step) {
        this.allowNextStep(stepIndex)
            .pipe(take(1))
            .subscribe(nextStepAllowed => {
            if (nextStepAllowed) {
                const isDifferentStep = !this.currentActiveStep || step.id !== this.currentActiveStep.id;
                if (this.usePoSteps && isDifferentStep) {
                    this.controlStepsStatus(stepIndex, step);
                    this.onChangeStep.emit(step);
                }
                else if (!this.usePoSteps && stepIndex !== this.currentStepIndex) {
                    // if para tratamento do modelo antigo do po-stepper
                    this.onChangeStep.emit(stepIndex + 1);
                }
            }
        });
    }
    onStepActive(step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.poSteps.find(stepChild => stepChild.status === PoStepperStatus.Active && stepChild.id !== step.id);
        this.setPreviousStepAsDone();
    }
    trackByFn(step) {
        return step.id;
    }
    activeFirstStep() {
        const hasStepActive = this.poSteps.some(poStep => poStep.status === PoStepperStatus.Active);
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    }
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return of(true);
        }
        const isAllowNextStep$ = this.usePoSteps
            ? this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep)
            : this.steps.slice(this.step, nextStepIndex).every(step => step.status === PoStepperStatus.Done);
        return typeof isAllowNextStep$ === 'boolean' ? of(isAllowNextStep$) : isAllowNextStep$;
    }
    canActiveNextStep(currentActiveStep = {}) {
        if (!currentActiveStep.canActiveNextStep) {
            return of(true);
        }
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        const canActiveNextStep$ = canActiveNextStep instanceof Observable ? canActiveNextStep : of(canActiveNextStep);
        return canActiveNextStep$.pipe(tap(isCanActiveNextStep => {
            currentActiveStep.status = this.getStepperStatusByCanActive(isCanActiveNextStep);
        }), catchError(err => {
            currentActiveStep.status = PoStepperStatus.Error;
            return throwError(err);
        }));
    }
    controlStepsStatus(stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    }
    getStepsAndIndex(step = {}) {
        const steps = this.getPoSteps();
        const stepIndex = steps.findIndex(poStep => poStep.id === step.id);
        return { steps, stepIndex };
    }
    getPoSteps() {
        return this.poSteps.toArray();
    }
    isBeforeStep(stepIndex) {
        const currentActiveStepIndex = () => this.getPoSteps().findIndex(step => step.id === this.currentActiveStep.id);
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    setFinalSteppersAsDisabled(stepIndex) {
        this.getPoSteps()
            .filter((step, index) => step && index >= stepIndex + 2)
            .forEach(step => (step.status = PoStepperStatus.Disabled));
    }
    setStepAsActive(step) {
        step.status = PoStepperStatus.Active;
    }
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    }
    setPreviousStepAsDone() {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = PoStepperStatus.Done;
        }
    }
}
PoStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-stepper',
                template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n  <div class=\"po-stepper-container\">\n    <po-stepper-step\n      *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index + 1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\"\n    >\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
            },] }
];
PoStepperComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoStepperComponent.propDecorators = {
    poSteps: [{ type: ContentChildren, args: [PoStepComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const PO_DISCLAIMER_TYPES = ['default', 'danger'];
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
export class PoDisclaimerBaseComponent {
    constructor() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
    }
    /**
     * @description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * @default false
     */
    set hideClose(value) {
        this._hideClose = value === '' ? true : convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * @default default
     * @optional
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    get type() {
        return this._type;
    }
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    getLabel() {
        return this.label ? this.label : this.value;
    }
}
PoDisclaimerBaseComponent.decorators = [
    { type: Directive }
];
PoDisclaimerBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    value: [{ type: Input, args: ['p-value',] }],
    property: [{ type: Input, args: ['p-property',] }],
    hideClose: [{ type: Input, args: ['p-hide-close',] }],
    closeAction: [{ type: Output, args: ['p-close-action',] }],
    type: [{ type: Input, args: ['p-type',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1kaXNjbGFpbWVyL3BvLWRpc2NsYWltZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sMEJBQTBCLEdBQUcsU0FBUyxDQUFDO0FBRTdDOzs7Ozs7Ozs7R0FTRztBQUVILE1BQU0sT0FBTyx5QkFBeUI7SUFEdEM7UUFFVSxVQUFLLEdBQVcsU0FBUyxDQUFDO1FBQzFCLGVBQVUsR0FBYSxLQUFLLENBQUM7UUFFckMsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUE4QnRCOzs7V0FHRztRQUN1QixnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBMEJ0RixDQUFDO0lBOUNDOzs7Ozs7O09BT0c7SUFDSCxJQUEyQixTQUFTLENBQUMsS0FBYztRQUNqRCxJQUFJLENBQUMsVUFBVSxHQUFRLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBUUQ7Ozs7Ozs7T0FPRztJQUNILElBQXFCLElBQUksQ0FBQyxJQUFZO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDO0lBQ3RGLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM5QyxDQUFDOzs7WUFoRUYsU0FBUzs7O29CQVdQLEtBQUssU0FBQyxTQUFTO29CQUdmLEtBQUssU0FBQyxTQUFTO3VCQUdmLEtBQUssU0FBQyxZQUFZO3dCQVVsQixLQUFLLFNBQUMsY0FBYzswQkFZcEIsTUFBTSxTQUFDLGdCQUFnQjttQkFVdkIsS0FBSyxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFBPX0RJU0NMQUlNRVJfVFlQRVMgPSBbJ2RlZmF1bHQnLCAnZGFuZ2VyJ107XG5jb25zdCBQT19ESVNDTEFJTUVSX0RFRkFVTFRfVFlQRSA9ICdkZWZhdWx0JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgcG8tZGlzY2xhaW1lciDDqSByZXNwb25zw6F2ZWwgcG9yIHJlcHJlc2VudGFyIHRhZ3MuXG4gKiBTZXUgdXNvIMOpIHJlY29tZW5kYWRvIGVtIGJ1c2NhcyBlIGVtIGNhbXBvcyBvbmRlIMOpIG5lY2Vzc8OhcmlvIHJlcHJlc2VudGFyIG9iamV0b3Mgc2VsZWNpb25hZG9zLFxuICogY29tbyBwb3IgZXhlbXBsbywgbm8gcG8tbXVsdGktc2VsZWN0LlxuICpcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9EaXNjbGFpbWVyQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3R5cGU6IHN0cmluZyA9ICdkZWZhdWx0JztcbiAgcHJpdmF0ZSBfaGlkZUNsb3NlPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHNob3dEaXNjbGFpbWVyID0gdHJ1ZTtcblxuICAvKipcbiAgICogTGFiZWwgcXVlIGFwYXJlY2Vyw6EgZGVudHJvIGRvIHBvLWRpc2NsYWltZXIuXG4gICAqIFF1YW5kbyBuw6NvIGZvciBkZWZpbmlkbyB1bSBsYWJlbCBzZXLDoSBhcHJlc2VudGFkYSBhIHByb3ByaWVkYWRlIHAtdmFsdWUuXG4gICAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbD86IHN0cmluZztcblxuICAvKiogVmFsb3IgZG8gcG8tZGlzY2xhaW1lci4gKi9cbiAgQElucHV0KCdwLXZhbHVlJykgdmFsdWU6IHN0cmluZztcblxuICAvKiogTm9tZSBkYSBwcm9wcmllZGFkZSB2aW5jdWxhZGEgw6AgZXN0ZSBwby1kaXNjbGFpbWVyLiAqL1xuICBASW5wdXQoJ3AtcHJvcGVydHknKSBwcm9wZXJ0eT86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEVzdGEgcHJvcHJpZWRhZGUgZXNjb25kZSBvIGJvdMOjbyBwYXJhIGZlY2hhbWVudG8gZG8gcG8tZGlzY2xhaW1lciwgYW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZVxuICAgKiBzZW0gcGFzc2FyIHZhbG9yIGEgbWVzbWEgw6kgc2V0YWRhIGNvbW8gZmFsc2UsIG9uZGUgbyBib3TDo28gZGUgZmVjaGFtZW50byBlc3TDoSB2aXPDrXZlbC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLWNsb3NlJykgc2V0IGhpZGVDbG9zZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVDbG9zZSA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhpZGVDbG9zZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faGlkZUNsb3NlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50byBkaXNwYXJhZG8gYW8gZmVjaGFyIG8gZGlzY2xhaW1lci5cbiAgICogUGFyYSBlc3RlIGV2ZW50byBzZXLDoSBwYXNzYWRvIGNvbW8gcGFyw6JtZXRybyB1bSBvYmpldG8gY29tIHZhbHVlLCBsYWJlbCBlIHByb3BlcnR5LlxuICAgKi9cbiAgQE91dHB1dCgncC1jbG9zZS1hY3Rpb24nKSBjbG9zZUFjdGlvbj86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUaXBvIGRvIHBvLWRpc2NsYWltZXIuIFBvZGUgc2VyICdkZWZhdWx0JyBvdSAnZGFuZ2VyJy5cbiAgICpcbiAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIEBJbnB1dCgncC10eXBlJykgc2V0IHR5cGUodHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdHlwZSA9IFBPX0RJU0NMQUlNRVJfVFlQRVMuaW5jbHVkZXModHlwZSkgPyB0eXBlIDogUE9fRElTQ0xBSU1FUl9ERUZBVUxUX1RZUEU7XG4gIH1cblxuICBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGlzY2xhaW1lciA9IGZhbHNlO1xuICAgIHRoaXMuY2xvc2VBY3Rpb24uZW1pdCh7IHZhbHVlOiB0aGlzLnZhbHVlLCBsYWJlbDogdGhpcy5sYWJlbCwgcHJvcGVydHk6IHRoaXMucHJvcGVydHkgfSk7XG4gIH1cblxuICBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbCA/IHRoaXMubGFiZWwgOiB0aGlzLnZhbHVlO1xuICB9XG59XG4iXX0=
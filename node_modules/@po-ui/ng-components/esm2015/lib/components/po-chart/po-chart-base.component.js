import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { PoChartType } from './enums/po-chart-type.enum';
const poChartDefaultHeight = 400;
const poChartMinHeight = 200;
const poChartTypeDefault = PoChartType.Pie;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir o tipo de gráfico, uma altura e um título.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 * - Para exibir a intensidade de um único dado dê preferência ao tipo `gauge`.
 */
export class PoChartBaseComponent {
    constructor() {
        this._type = poChartTypeDefault;
        this.poChartType = PoChartType;
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * O valor padrão dos gráficos são:
     * - para o tipo *gauge*: `200px`;
     * - para os demais tipos: `400px`.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value) {
        const intValue = convertToInt(value);
        let height;
        if (isTypeof(value, 'number')) {
            height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
        }
        else {
            height = this.setDefaultHeight();
        }
        this._height = height;
        this.rebuildComponent();
    }
    get height() {
        return this._height || this.setDefaultHeight();
    }
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * - `PoChartGaugeSerie`
     */
    set series(value) {
        this._series = value || [];
        this.chartSeries = Array.isArray(this._series)
            ? [...this._series]
            : this.transformObjectToArrayObject(this._series);
    }
    get series() {
        return this._series;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     *
     * @default `PoChartType.Pie`
     */
    set type(value) {
        this._type = Object.values(PoChartType).includes(value) ? value : poChartTypeDefault;
        this.rebuildComponent();
    }
    get type() {
        return this._type;
    }
    onSeriesClick(event) {
        this.seriesClick.emit(event);
    }
    onSeriesHover(event) {
        this.seriesHover.emit(event);
    }
    setDefaultHeight() {
        return this.type === PoChartType.Gauge ? poChartMinHeight : poChartDefaultHeight;
    }
    transformObjectToArrayObject(serie) {
        return typeof serie === 'object' && Object.keys(serie).length ? [Object.assign({}, serie)] : [];
    }
}
PoChartBaseComponent.decorators = [
    { type: Directive }
];
PoChartBaseComponent.propDecorators = {
    height: [{ type: Input, args: ['p-height',] }],
    series: [{ type: Input, args: ['p-series',] }],
    title: [{ type: Input, args: ['p-title',] }],
    type: [{ type: Input, args: ['p-type',] }],
    seriesClick: [{ type: Output, args: ['p-series-click',] }],
    seriesHover: [{ type: Output, args: ['p-series-hover',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, IterableDiffers, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartColors } from './po-chart-colors.constant';
import { PoChartDonutComponent } from './po-chart-types/po-chart-donut/po-chart-donut.component';
import { PoChartGaugeComponent } from './po-chart-types/po-chart-gauge/po-chart-gauge.component';
import { PoChartPieComponent } from './po-chart-types/po-chart-pie/po-chart-pie.component';
import { PoChartType } from './enums/po-chart-type.enum';
/**
 * @docsExtends PoChartBaseComponent
 *
 * @example
 *
 * <example name="po-chart-basic" title="PO Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="PO Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="PO Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
export class PoChartComponent extends PoChartBaseComponent {
    constructor(changeDetector, componentFactoryResolver, differs) {
        super();
        this.changeDetector = changeDetector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.differs = differs;
        this.calculatedElement = false;
        this.initialized = false;
        this.windowResizeListener = new Subject();
        this.mappings = {
            [PoChartType.Donut]: PoChartDonutComponent,
            [PoChartType.Gauge]: PoChartGaugeComponent,
            [PoChartType.Pie]: PoChartPieComponent
        };
        this.colors = [];
        this.onResize = () => this.windowResizeListener.next();
        this.differ = this.differs.find([]).create(null);
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    ngAfterViewInit() {
        this.initialized = true;
    }
    ngDoCheck() {
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    }
    ngOnDestroy() {
        this.removeWindowResizeListener();
    }
    ngOnInit() {
        this.getSeriesColor();
    }
    rebuildComponent() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
    }
    chartLegendHeight(chartLegend) {
        return chartLegend ? chartLegend.nativeElement.offsetHeight : 0;
    }
    checkingForSerieChanges() {
        if (this.componentRef && this.differ) {
            const changeSeries = this.differ.diff(this.chartSeries);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    }
    createComponent() {
        const componentType = this.getComponentType(this.type);
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        const instance = this.componentRef.instance;
        this.setChartProperties(instance);
        return instance;
    }
    dynamicComponentSetting() {
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    getSeriesColor() {
        const colorsLength = PoChartColors.length - 1;
        if (!this.chartSeries) {
            return (this.colors = PoChartColors[colorsLength]);
        }
        if (this.type === PoChartType.Gauge) {
            return (this.colors = PoChartColors[0]);
        }
        const seriesLength = this.chartSeries.length - 1;
        if (seriesLength > colorsLength) {
            let colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            const quantityDuplicates = seriesLength / colorsLength;
            for (let i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return (this.colors = colors);
        }
        return (this.colors = PoChartColors[seriesLength]);
    }
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = () => { };
        }
    }
    setChartProperties(instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegendHeight(this.chartLegend);
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? [...this.colors] : [];
        instance.height = this.height;
        instance.type = this.type;
        instance.series = this.chartSeries || [];
    }
    setClickSubscribe(instance) {
        instance.onSerieClick.subscribe(event => {
            this.onSeriesClick(event);
        });
    }
    setHoverSubscribe(instance) {
        instance.onSerieHover.subscribe(event => {
            this.onSeriesHover(event);
        });
    }
    setResizeListenerSubscribe(instance) {
        this.windowResizeListener.subscribe(() => {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegendHeight(this.chartLegend);
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        });
    }
}
PoChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart',
                template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n\n  <div *ngIf=\"!isChartGaugeType\">\n    <ng-container *ngTemplateOutlet=\"chartLegendGroup\"></ng-container>\n  </div>\n</div>\n\n<ng-template #chartLegendGroup>\n  <po-chart-legend #chartLegend [p-colors]=\"colors\" [p-series]=\"series\"> </po-chart-legend>\n</ng-template>\n"
            },] }
];
PoChartComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers }
];
PoChartComponent.propDecorators = {
    chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef, static: true },] }],
    chartHeader: [{ type: ViewChild, args: ['chartHeader', { static: true },] }],
    chartLegend: [{ type: ViewChild, args: ['chartLegend', { read: ElementRef },] }],
    chartWrapper: [{ type: ViewChild, args: ['chartWrapper', { static: true },] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,
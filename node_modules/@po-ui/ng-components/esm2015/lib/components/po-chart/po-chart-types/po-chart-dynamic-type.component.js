import { ElementRef, ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
const Padding = 24;
/* tslint:disable:directive-class-suffix */
export class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue =
            this.type === PoChartType.Gauge
                ? 100
                : this.series.reduce((previousValue, serie) => previousValue + serie.value, 0);
    }
}
PoChartDynamicTypeComponent.decorators = [
    { type: Directive }
];
PoChartDynamicTypeComponent.propDecorators = {
    chartBody: [{ type: ViewChild, args: ['chartBody', { static: true },] }],
    svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRy9CLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUkxRCxNQUFNLE9BQU8sR0FBVyxFQUFFLENBQUM7QUFFM0IsMkNBQTJDO0FBRTNDLE1BQU0sT0FBZ0IsMkJBQTJCO0lBRGpEO1FBY0UsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsaUJBQVksR0FBdUUsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNqRyxpQkFBWSxHQUF1RSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pHLFdBQU0sR0FBZSxFQUFFLENBQUM7SUE4QjFCLENBQUM7SUFqQkMsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVELCtCQUErQixDQUFDLG1CQUEyQixFQUFFLGtCQUEwQixFQUFFLGtCQUEwQjtRQUNqSCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsa0JBQWtCLEdBQUcsa0JBQWtCLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUVuRyxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUMxRSxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxVQUFVO1lBQ2IsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSztnQkFDN0IsQ0FBQyxDQUFDLEdBQUc7Z0JBQ0wsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQzs7O1lBOUNGLFNBQVM7Ozt3QkEwQlAsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MkJBRXZDLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4vcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2Utc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0NoYXJ0VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XG5pbXBvcnQgeyBQb0RvbnV0Q2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LWRvbnV0L3BvLWNoYXJ0LWRvbnV0LXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QaWVDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtcGllL3BvLWNoYXJ0LXBpZS1zZXJpZXMuaW50ZXJmYWNlJztcblxuY29uc3QgUGFkZGluZzogbnVtYmVyID0gMjQ7XG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXggKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnREeW5hbWljVHlwZUNvbXBvbmVudCB7XG4gIHByb3RlY3RlZCB3aW5kb3dSZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcbiAgcHJvdGVjdGVkIHdpbmRvd1Njcm9sbExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG4gIGNlbnRlclg6IG51bWJlcjtcbiAgY2hhcnRFbGVtZW50Q2F0ZWdvcnk6IGFueTtcbiAgY2hhcnRFbGVtZW50RGVzY3JpcHRpb246IGFueTtcbiAgY2hhcnRFbGVtZW50VmFsdWU6IGFueTtcbiAgY2hhcnRIZWFkZXI6IG51bWJlcjtcbiAgY2hhcnRMZWdlbmQ6IG51bWJlcjtcbiAgY2hhcnRXcmFwcGVyOiBudW1iZXI7XG4gIGNvbG9yczogQXJyYXk8c3RyaW5nPjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGlubmVyUmFkaXVzOiBudW1iZXIgPSAwO1xuICBvblNlcmllQ2xpY2s6IFN1YmplY3Q8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcyB8IFBvQ2hhcnRHYXVnZVNlcmllPiA9IG5ldyBTdWJqZWN0KCk7XG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzIHwgUG9DaGFydEdhdWdlU2VyaWU+ID0gbmV3IFN1YmplY3QoKTtcbiAgc2VyaWVzOiBBcnJheTxhbnk+ID0gW107XG4gIHN2Z0VsZW1lbnQ6IEhUTUxPYmplY3RFbGVtZW50O1xuICBzdmdIZWlnaHQ6IG51bWJlcjtcbiAgdGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50ICYgRXZlbnRUYXJnZXQ7XG4gIHRvb2x0aXBFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcbiAgdG9vbHRpcFRleHQ6IHN0cmluZztcbiAgdG90YWxWYWx1ZTogbnVtYmVyO1xuICB0eXBlOiBQb0NoYXJ0VHlwZTtcblxuICBAVmlld0NoaWxkKCdjaGFydEJvZHknLCB7IHN0YXRpYzogdHJ1ZSB9KSBjaGFydEJvZHk6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnc3ZnQ29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgc3ZnQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gIGdldCBpc0NoYXJ0R2F1Z2VUeXBlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFBvQ2hhcnRUeXBlLkdhdWdlO1xuICB9XG5cbiAgY2FsY3VsYXRlU1ZHQ29udGFpbmVyRGltZW5zaW9ucyhjaGFydFdyYXBwZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0SGVhZGVyRWxlbWVudDogbnVtYmVyLCBjaGFydExlZ2VuZEVsZW1lbnQ6IG51bWJlcikge1xuICAgIGNvbnN0IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPSB0aGlzLmhlaWdodCAtIGNoYXJ0SGVhZGVyRWxlbWVudCAtIGNoYXJ0TGVnZW5kRWxlbWVudCAtIFBhZGRpbmcgKiAyO1xuXG4gICAgdGhpcy5zdmdIZWlnaHQgPSBzdmdDb250YWluZXJIZWlnaHRDYWxjIDw9IDAgPyAwIDogc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYztcbiAgICB0aGlzLmNlbnRlclggPSBjaGFydFdyYXBwZXJFbGVtZW50IC8gMjtcbiAgfVxuXG4gIGNhbGN1bGF0ZVRvdGFsVmFsdWUoKSB7XG4gICAgdGhpcy50b3RhbFZhbHVlID1cbiAgICAgIHRoaXMudHlwZSA9PT0gUG9DaGFydFR5cGUuR2F1Z2VcbiAgICAgICAgPyAxMDBcbiAgICAgICAgOiB0aGlzLnNlcmllcy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIHNlcmllKSA9PiBwcmV2aW91c1ZhbHVlICsgc2VyaWUudmFsdWUsIDApO1xuICB9XG59XG4iXX0=
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
export class PoChartGaugeTextContentComponent {
    constructor(changeDetection) {
        this.changeDetection = changeDetection;
    }
    set gaugeWidth(value) {
        this._gaugeWidth = value;
        this.checkTextDescriptionSize();
    }
    get gaugeWidth() {
        return this._gaugeWidth;
    }
    set serie(serie) {
        if (serie) {
            this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
            this._serie = Object.assign({}, serie);
        }
        else {
            this._serie = undefined;
        }
    }
    get serie() {
        return this._serie;
    }
    get hasSerieDescription() {
        return this.serie && this.serie.description;
    }
    get hasSerieValue() {
        return this.serie && this.serie.value >= 0;
    }
    get maxDescriptionWidth() {
        // Diferença contemplando a largura do path base e padding interno.
        const subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
        const descriptionWidth = this.gaugeWidth - subtractionArea;
        return { 'max-width': `${descriptionWidth}px` };
    }
    ngAfterViewInit() {
        this.checkTextDescriptionSize();
    }
    checkTextDescriptionSize() {
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(() => {
                this.tooltip = this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    }
    convertValueInPercentFormat(value) {
        const decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return `${decimalValue}%`;
    }
    isEllipsisActive() {
        const isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    }
}
PoChartGaugeTextContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart-gauge-text-content',
                template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\n    {{ serie?.description }}\n  </p>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoChartGaugeTextContentComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoChartGaugeTextContentComponent.propDecorators = {
    gaugeWidth: [{ type: Input, args: ['p-gauge-width',] }],
    serie: [{ type: Input, args: ['p-serie',] }],
    descriptionElement: [{ type: ViewChild, args: ['description', { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFPNUYsTUFBTSxPQUFPLGdDQUFnQztJQWdDM0MsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBQUcsQ0FBQztJQXpCMUQsSUFBNEIsVUFBVSxDQUFDLEtBQWE7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBc0IsS0FBSyxDQUFDLEtBQXdCO1FBQ2xELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLE1BQU0scUJBQVEsS0FBSyxDQUFFLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBTUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixtRUFBbUU7UUFDbkUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxzQkFBc0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUM7UUFFM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLGdCQUFnQixJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyx3QkFBd0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IseUVBQXlFO1lBQ3pFLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU8sMkJBQTJCLENBQUMsS0FBYTtRQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRixPQUFPLEdBQUcsWUFBWSxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixNQUFNLGVBQWUsR0FDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFFeEcsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDOUQsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyw0V0FBMkQ7Z0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFoQkMsaUJBQWlCOzs7eUJBd0JoQixLQUFLLFNBQUMsZUFBZTtvQkFVckIsS0FBSyxTQUFDLFNBQVM7aUNBYWYsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIFZpZXdDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydE51bWJlclRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9DaGFydEdhdWdlU2VyaWVXaWR0aCB9IGZyb20gJy4uLy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIHNlcmllVmFsdWVDb252ZXJ0ZWQ6IHN0cmluZztcbiAgdG9vbHRpcDogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2dhdWdlV2lkdGg6IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2VyaWU6IFBvQ2hhcnRHYXVnZVNlcmllO1xuXG4gIEBJbnB1dCgncC1nYXVnZS13aWR0aCcpIHNldCBnYXVnZVdpZHRoKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9nYXVnZVdpZHRoID0gdmFsdWU7XG5cbiAgICB0aGlzLmNoZWNrVGV4dERlc2NyaXB0aW9uU2l6ZSgpO1xuICB9XG5cbiAgZ2V0IGdhdWdlV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dhdWdlV2lkdGg7XG4gIH1cblxuICBASW5wdXQoJ3Atc2VyaWUnKSBzZXQgc2VyaWUoc2VyaWU6IFBvQ2hhcnRHYXVnZVNlcmllKSB7XG4gICAgaWYgKHNlcmllKSB7XG4gICAgICB0aGlzLnNlcmllVmFsdWVDb252ZXJ0ZWQgPSB0aGlzLmNvbnZlcnRWYWx1ZUluUGVyY2VudEZvcm1hdChzZXJpZS52YWx1ZSk7XG4gICAgICB0aGlzLl9zZXJpZSA9IHsgLi4uc2VyaWUgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2VyaWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNlcmllKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXJpZTtcbiAgfVxuXG4gIEBWaWV3Q2hpbGQoJ2Rlc2NyaXB0aW9uJywgeyByZWFkOiBFbGVtZW50UmVmIH0pIGRlc2NyaXB0aW9uRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgZ2V0IGhhc1NlcmllRGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VyaWUgJiYgdGhpcy5zZXJpZS5kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGdldCBoYXNTZXJpZVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnNlcmllICYmIHRoaXMuc2VyaWUudmFsdWUgPj0gMDtcbiAgfVxuXG4gIGdldCBtYXhEZXNjcmlwdGlvbldpZHRoKCkge1xuICAgIC8vIERpZmVyZW7Dp2EgY29udGVtcGxhbmRvIGEgbGFyZ3VyYSBkbyBwYXRoIGJhc2UgZSBwYWRkaW5nIGludGVybm8uXG4gICAgY29uc3Qgc3VidHJhY3Rpb25BcmVhID0gdGhpcy5nYXVnZVdpZHRoICogcG9DaGFydEdhdWdlU2VyaWVXaWR0aCAqIDIgKiAyO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uV2lkdGggPSB0aGlzLmdhdWdlV2lkdGggLSBzdWJ0cmFjdGlvbkFyZWE7XG5cbiAgICByZXR1cm4geyAnbWF4LXdpZHRoJzogYCR7ZGVzY3JpcHRpb25XaWR0aH1weGAgfTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmNoZWNrVGV4dERlc2NyaXB0aW9uU2l6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1RleHREZXNjcmlwdGlvblNpemUoKSB7XG4gICAgaWYgKHRoaXMuZGVzY3JpcHRpb25FbGVtZW50KSB7XG4gICAgICAvLyB0b29sdGlwIG5lY2Vzc8OhcmlvIHBhcmEgY29udG9ybmFyIGNvbXBvcnRhbWVudG8gaW5lc3BlcmFkbyBkbyB0b29sdGlwLlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudG9vbHRpcCA9IHRoaXMuaXNFbGxpcHNpc0FjdGl2ZSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdGlvbi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VmFsdWVJblBlcmNlbnRGb3JtYXQodmFsdWU6IG51bWJlcik6IHN0cmluZyB7XG4gICAgY29uc3QgZGVjaW1hbFZhbHVlID0gU3RyaW5nKGNvbnZlcnROdW1iZXJUb0RlY2ltYWwodmFsdWUsIDEpKS5yZXBsYWNlKCcuJywgJywnKTtcbiAgICByZXR1cm4gYCR7ZGVjaW1hbFZhbHVlfSVgO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0VsbGlwc2lzQWN0aXZlKCkge1xuICAgIGNvbnN0IGlzRXhjZWVkZWRXaWR0aCA9XG4gICAgICB0aGlzLmRlc2NyaXB0aW9uRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIDwgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcblxuICAgIHJldHVybiBpc0V4Y2VlZGVkV2lkdGggPyB0aGlzLnNlcmllLmRlc2NyaXB0aW9uIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=
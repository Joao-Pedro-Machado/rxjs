import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { PoCalendarLangService } from './services/po-calendar.lang.service';
import { PoDateService } from '../../services/po-date';
const poCalendarLocales = ['pt', 'en', 'es'];
const poCalendarLocaleDefault = 'pt';
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
export class PoCalendarBaseComponent {
    constructor(poDate, poCalendarLangService) {
        this.poDate = poDate;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     *
     * @default `pt`
     */
    set locale(locale) {
        this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    }
}
PoCalendarBaseComponent.decorators = [
    { type: Directive }
];
PoCalendarBaseComponent.ctorParameters = () => [
    { type: PoDateService },
    { type: PoCalendarLangService }
];
PoCalendarBaseComponent.propDecorators = {
    locale: [{ type: Input, args: ['p-locale',] }],
    maxDate: [{ type: Input, args: ['p-max-date',] }],
    minDate: [{ type: Input, args: ['p-min-date',] }],
    change: [{ type: Output, args: ['p-change',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { poLocaleDefault } from './../../../utils/util';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
export const poPageEditLiteralsDefault = {
    en: {
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    },
    es: {
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    },
    pt: {
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    },
    ru: {
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }
};
/**
 * @description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro, tendo a possibilidade de usar as ações de "Salvar", "Salvar e Novo" e "Cancelar".
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade `p-disable-submit`.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
export class PoPageEditBaseComponent {
    constructor(languageService) {
        /**
         * Evento que será disparado ao clicar no botão de "Cancelar".
         *
         * ```
         * <po-page-edit (p-cancel)="myCancelFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Cancelar" não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar".
         *
         * ```
         * <po-page-edit (p-save)="mySaveFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar" não será exibido.
         */
        this.save = new EventEmitter();
        /**
         * Evento que será disparado ao clicar no botão de "Salvar e Novo".
         *
         * ```
         * <po-page-edit (p-save-new)="mySaveNewFunction()">
         * </po-page-edit>
         * ```
         *
         * > Caso não utilizar esta propriedade, o botão de "Salvar e Novo" não será exibido.
         */
        this.saveNew = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-edit`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Voltar',
     *    save: 'Confirmar',
     *    saveNew: 'Confirmar e criar um novo'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageEditLiterals = {
     *    cancel: 'Cancelar processo'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-edit
     *   [p-literals]="customLiterals">
     * </po-page-edit>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageEditLiteralsDefault[poLocaleDefault]), poPageEditLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageEditLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageEditLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageEditBaseComponent.decorators = [
    { type: Directive }
];
PoPageEditBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageEditBaseComponent.propDecorators = {
    poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    disableSubmit: [{ type: Input, args: ['p-disable-submit',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    title: [{ type: Input, args: ['p-title',] }],
    cancel: [{ type: Output, args: ['p-cancel',] }],
    save: [{ type: Output, args: ['p-save',] }],
    saveNew: [{ type: Output, args: ['p-save-new',] }]
};
//# sourceMappingURL=data:application/json;base64,
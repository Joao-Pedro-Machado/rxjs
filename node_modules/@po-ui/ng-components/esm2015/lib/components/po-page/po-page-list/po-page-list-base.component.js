import { Input, Directive } from '@angular/core';
import { poLocaleDefault } from './../../../utils/util';
import { PoLanguageService } from './../../../services/po-language/po-language.service';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
export const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export class PoPageListBaseComponent extends PoPageDefaultBaseComponent {
    constructor(languageService) {
        super();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
}
PoPageListBaseComponent.decorators = [
    { type: Directive }
];
PoPageListBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageListBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    disclaimerGroup: [{ type: Input, args: ['p-disclaimer-group',] }],
    filter: [{ type: Input, args: ['p-filter',] }],
    literals: [{ type: Input, args: ['p-literals',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXBhZ2UvcG8tcGFnZS1saXN0L3BvLXBhZ2UtbGlzdC1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFJeEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFJL0YsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkMsRUFBRSxFQUFzQjtRQUN0QixZQUFZLEVBQUUsZUFBZTtLQUM5QjtJQUNELEVBQUUsRUFBc0I7UUFDdEIsWUFBWSxFQUFFLGdCQUFnQjtLQUMvQjtJQUNELEVBQUUsRUFBc0I7UUFDdEIsWUFBWSxFQUFFLGNBQWM7S0FDN0I7SUFDRCxFQUFFLEVBQXNCO1FBQ3RCLFlBQVksRUFBRSxpQkFBaUI7S0FDaEM7Q0FDRixDQUFDO0FBRUY7Ozs7Ozs7Ozs7OztHQVlHO0FBRUgsTUFBTSxPQUFnQix1QkFBd0IsU0FBUSwwQkFBMEI7SUEyRjlFLFlBQVksZUFBa0M7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUEvRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBaUMsZUFBZSxDQUFDLEtBQXdCO1FBQ3ZFLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixLQUFLLEdBQVEsRUFBRSxDQUFDO1NBQ2pCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFTRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnQ0c7SUFDSCxJQUF5QixRQUFRLENBQUMsS0FBeUI7UUFDekQsSUFBSSxLQUFLLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFNBQVMsaURBQ1QseUJBQXlCLENBQUMsZUFBZSxDQUFDLEdBQzFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FDeEMsS0FBSyxDQUNULENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDM0Q7SUFDSCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7WUExRkYsU0FBUzs7O1lBcENELGlCQUFpQjs7O3lCQW1EdkIsS0FBSyxTQUFDLGNBQWM7OEJBU3BCLEtBQUssU0FBQyxvQkFBb0I7cUJBaUIxQixLQUFLLFNBQUMsVUFBVTt1QkFtQ2hCLEtBQUssU0FBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb0JyZWFkY3J1bWIgfSBmcm9tICcuLi8uLi9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRGlzY2xhaW1lckdyb3VwIH0gZnJvbSAnLi4vLi4vcG8tZGlzY2xhaW1lci1ncm91cC9wby1kaXNjbGFpbWVyLWdyb3VwLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VEZWZhdWx0QmFzZUNvbXBvbmVudCB9IGZyb20gJy4uL3BvLXBhZ2UtZGVmYXVsdC9wby1wYWdlLWRlZmF1bHQtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9QYWdlRmlsdGVyIH0gZnJvbSAnLi8uLi9wby1wYWdlLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlTGlzdExpdGVyYWxzIH0gZnJvbSAnLi9wby1wYWdlLWxpc3QtbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9QYWdlTGlzdExpdGVyYWxzPntcbiAgICBvdGhlckFjdGlvbnM6ICdPdGhlciBhY3Rpb25zJ1xuICB9LFxuICBlczogPFBvUGFnZUxpc3RMaXRlcmFscz57XG4gICAgb3RoZXJBY3Rpb25zOiAnT3RyYXMgYWNjaW9uZXMnXG4gIH0sXG4gIHB0OiA8UG9QYWdlTGlzdExpdGVyYWxzPntcbiAgICBvdGhlckFjdGlvbnM6ICdPdXRyYXMgYcOnw7VlcydcbiAgfSxcbiAgcnU6IDxQb1BhZ2VMaXN0TGl0ZXJhbHM+e1xuICAgIG90aGVyQWN0aW9uczogJ9CU0YDRg9Cz0LjQtSDQtNC10LnRgdGC0LLQuNGPJ1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tcGFnZS1saXN0YCDDqSB1dGlsaXphZG8gY29tbyBvIGNvbnRhaW5lciBwcmluY2lwYWwgcGFyYSBhcyB0ZWxhcyBkZSBsaXN0YWdlbSBkZSBkYWRvcyxcbiAqIHBvZGVuZG8gc2VyIGFwcmVzZW50YWRvIGNvbW8gbGlzdGEgb3UgdGFiZWxhLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb3NzaWJpbGl0YSByZWFsaXphciBmaWx0cm8gZG9zIGRhZG9zLCBubyBxdWFsIHBlcm1pdGUgcXVlIHNlamEgYXRyaWJ1aWRvIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIG5vIG1vbWVudG9cbiAqIGRhIGZpbHRyYWdlbS4gRXN0ZSBjb21wb3J0YW1lbnRvIHBvZGUgc2VyIGFjaW9uYWRvIHRhbnRvIGFvICpjbGljayogZG8gw61jb25lIFtwby1pY29uLXNlYXJjaF0oL2d1aWRlcy9pY29ucylcbiAqIHF1YW50byBhbyBwcmVzc2lvbmFyIGRhIHRlY2xhICpFTlRFUiogcXVhbmRvIG8gZm9jbyBlc3RpdmVyIG5vIGNhbXBvIGRlIHBlc3F1aXNhLlxuICpcbiAqIFBhcmEgZmFjaWxpdGFyIGEgbWFuaXB1bGHDp8OjbyBlIHZpc3VhbGl6YcOnw6NvIGRvcyBmaWx0cm9zIGFwbGljYWRvcywgw6kgcG9zc8OtdmVsIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlXG4gKiBbYHBvLWRpc2NsYWltZXItZ3JvdXBgXSgvZG9jdW1lbnRhdGlvbi9wby1kaXNjbGFpbWVyLWdyb3VwKS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9QYWdlTGlzdEJhc2VDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VEZWZhdWx0QmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX2Rpc2NsYWltZXJHcm91cD86IFBvRGlzY2xhaW1lckdyb3VwO1xuICBwcml2YXRlIF9saXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzO1xuXG4gIHByb3RlY3RlZCBsYW5ndWFnZTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvQnJlYWRjcnVtYmAuXG4gICAqL1xuICBASW5wdXQoJ3AtYnJlYWRjcnVtYicpIGJyZWFkY3J1bWI/OiBQb0JyZWFkY3J1bWI7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvRGlzY2xhaW1lckdyb3VwYC5cbiAgICovXG4gIEBJbnB1dCgncC1kaXNjbGFpbWVyLWdyb3VwJykgc2V0IGRpc2NsYWltZXJHcm91cCh2YWx1ZTogUG9EaXNjbGFpbWVyR3JvdXApIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IDxhbnk+e307XG4gICAgfVxuXG4gICAgdGhpcy5fZGlzY2xhaW1lckdyb3VwID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZGlzY2xhaW1lckdyb3VwKCk6IFBvRGlzY2xhaW1lckdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzY2xhaW1lckdyb3VwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9QYWdlRmlsdGVyYC5cbiAgICovXG4gIEBJbnB1dCgncC1maWx0ZXInKSBmaWx0ZXI6IFBvUGFnZUZpbHRlcjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tcGFnZS1saXN0YC5cbiAgICpcbiAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xuICAgKiAgICBvdGhlckFjdGlvbnM6ICdNYWlzIGHDp8O1ZXMnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xuICAgKiAgICBvdGhlckFjdGlvbnM6ICdBw6fDtWVzIGRhIHDDoWdpbmEnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1wYWdlLWxpc3RcbiAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3BvLXBhZ2UtbGlzdD5cbiAgICogYGBgXG4gICAqXG4gICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91ICpicm93c2VyKi5cbiAgICovXG4gIEBJbnB1dCgncC1saXRlcmFscycpIHNldCBsaXRlcmFscyh2YWx1ZTogUG9QYWdlTGlzdExpdGVyYWxzKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xuICAgICAgICAuLi5wb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAgIC4uLnBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxpdGVyYWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCBwb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcbiAgfVxufVxuIl19
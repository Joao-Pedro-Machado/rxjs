import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { isExternalLink, isTypeof, openExternalLink } from '../../utils/util';
import { PoControlPositionService } from '../../services/po-control-position/po-control-position.service';
import { PoPopupBaseComponent } from './po-popup-base.component';
/**
 *
 * @docsExtends PoPopupBaseComponent
 *
 * @example
 *
 * <example name="po-popup-basic" title="PO Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="PO Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="PO Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
export class PoPopupComponent extends PoPopupBaseComponent {
    constructor(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        super();
        this.renderer = renderer;
        this.router = router;
        this.poControlPosition = poControlPosition;
        this.changeDetector = changeDetector;
        this.onScroll = () => {
            if (this.showPopup) {
                this.close();
            }
        };
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    close() {
        this.removeListeners();
        this.showPopup = false;
    }
    onActionClick(popupAction) {
        const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            popupAction.action(this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    }
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    open(param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    }
    returnBooleanValue(popupAction, property) {
        return isTypeof(popupAction[property], 'function')
            ? popupAction[property](this.param || popupAction)
            : popupAction[property];
    }
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    toggle(param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    }
    clickedOutDisabledItem(event) {
        const containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    }
    clickedOutHeaderTemplate(event) {
        const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    }
    clickedOutTarget(event) {
        return this.target && !this.target.contains(event.target);
    }
    closePopupOnClickout(event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    }
    elementContains(element, className) {
        return element && element.classList.contains(className);
    }
    hasContentToShow() {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', (event) => {
            this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setPosition() {
        this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    validateInitialContent() {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    }
}
PoPopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-popup',
                template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div\n      *ngIf=\"action.visible !== false\"\n      [class.po-popup-item-default]=\"action.type !== 'danger'\"\n      [class.po-popup-item-danger]=\"action.type === 'danger'\"\n      [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.po-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\"\n    >\n      <span *ngIf=\"action.icon\" class=\"po-icon {{ action.icon }} po-popup-icon-item\"></span>\n      {{ action.label }}\n    </div>\n  </ng-container>\n</div>\n",
                providers: [PoControlPositionService]
            },] }
];
PoPopupComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: Router },
    { type: PoControlPositionService },
    { type: ChangeDetectorRef }
];
PoPopupComponent.propDecorators = {
    popupRef: [{ type: ViewChild, args: ['popupRef', { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,
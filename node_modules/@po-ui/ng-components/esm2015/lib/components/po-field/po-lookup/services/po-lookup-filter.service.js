import { __rest } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
export class PoLookupFilterService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams } = filteredItemsParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams"]);
        const validatedFilterParams = this.validateParams(filterParams);
        const params = Object.assign(Object.assign({}, restFilteredItemsParams), validatedFilterParams);
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(`${this.url}/${value}`, { headers: this.headers, params: validatedFilterParams });
    }
    setUrl(url) {
        this.url = url;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoLookupFilterService.decorators = [
    { type: Injectable }
];
PoLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLbEQ7Ozs7OztHQU1HO0FBRUgsTUFBTSxPQUFPLHFCQUFxQjtJQU9oQyxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBSmpDLFlBQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUM7WUFDOUMsaUJBQWlCLEVBQUUsTUFBTTtTQUMxQixDQUFDLENBQUM7SUFFMEMsQ0FBQztJQUU5QyxnQkFBZ0IsQ0FBQyxtQkFBZ0Q7UUFDL0QsTUFBTSxFQUFFLFlBQVksS0FBaUMsbUJBQW1CLEVBQS9DLHVCQUF1QixVQUFLLG1CQUFtQixFQUFsRSxnQkFBNEMsQ0FBc0IsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsTUFBTSxNQUFNLG1DQUFRLHVCQUF1QixHQUFLLHFCQUFxQixDQUFFLENBQUM7UUFFeEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLFlBQWtCO1FBQ2hELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDL0csQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFTyxjQUFjLENBQUMsTUFBVztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDOzs7WUFoQ0YsVUFBVTs7O1lBakJGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyZWQtaXRlbXMtcGFyYW1zLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgcG8tbG9va3VwLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9Mb29rdXBGaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Mb29rdXBGaWx0ZXIge1xuICBwcml2YXRlIHVybDogc3RyaW5nO1xuXG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAnWC1QTy1Oby1NZXNzYWdlJzogJ3RydWUnXG4gIH0pO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBnZXRGaWx0ZXJlZEl0ZW1zKGZpbHRlcmVkSXRlbXNQYXJhbXM6IFBvTG9va3VwRmlsdGVyZWRJdGVtc1BhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgeyBmaWx0ZXJQYXJhbXMsIC4uLnJlc3RGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gPSBmaWx0ZXJlZEl0ZW1zUGFyYW1zO1xuXG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xuXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5yZXN0RmlsdGVyZWRJdGVtc1BhcmFtcywgLi4udmFsaWRhdGVkRmlsdGVyUGFyYW1zIH07XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldCh0aGlzLnVybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZywgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zOiB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgfSk7XG4gIH1cblxuICBzZXRVcmwodXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVQYXJhbXMocGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gaXNUeXBlb2YocGFyYW1zLCAnb2JqZWN0JykgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zKSA/IHBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
export class PoComboFilterService {
    constructor(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
        this.messages = [];
    }
    get url() {
        return this._url;
    }
    getFilteredData(param, filterParams) {
        const value = param.value;
        const filterParamsValidated = validateObjectType(filterParams);
        const params = Object.assign(Object.assign({}, filterParamsValidated), { filter: value });
        return this.http
            .get(`${this.url}`, { responseType: 'json', params: params })
            .pipe(map((response) => this.parseToArrayComboOption(response.items)));
    }
    getObjectByValue(value, filterParams) {
        const filterParamsValidated = validateObjectType(filterParams);
        return this.http
            .get(`${this.url}/${value}`, { params: filterParamsValidated })
            .pipe(map(item => this.parseToComboOption(item)));
    }
    configProperties(url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    }
    parseToArrayComboOption(items) {
        if (items && items.length > 0) {
            const parsedOptions = items.map(item => this.parseToComboOption(item));
            this.displayMessages();
            return parsedOptions;
        }
        return [];
    }
    parseToComboOption(item) {
        if (!(item === null || item === void 0 ? void 0 : item[this.fieldValue])) {
            this.addMessage(item, this.fieldValue);
            return { value: '' };
        }
        const label = item[this.fieldLabel];
        const value = item[this.fieldValue];
        return { label, value };
    }
    addMessage(item, property) {
        this.messages.push(`Cannot read property "${property}" of ${JSON.stringify(item)},
      see [p-field-value] property at https://po-ui.io/documentation/po-combo`);
    }
    displayMessages() {
        if (this.messages.length) {
            this.messages.forEach(message => console.error(message));
            this.messages = [];
        }
    }
}
PoComboFilterService.decorators = [
    { type: Injectable }
];
PoComboFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY29tYm8vcG8tY29tYm8tZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpEOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxvQkFBb0I7SUFZL0IsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQVRwQyxlQUFVLEdBQVcsT0FBTyxDQUFDO1FBQzdCLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFFckIsYUFBUSxHQUFHLEVBQUUsQ0FBQztJQU1pQixDQUFDO0lBSnhDLElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBSUQsZUFBZSxDQUFDLEtBQVUsRUFBRSxZQUFrQjtRQUM1QyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzFCLE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0QsTUFBTSxNQUFNLG1DQUFRLHFCQUFxQixLQUFFLE1BQU0sRUFBRSxLQUFLLEdBQUUsQ0FBQztRQUUzRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDNUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQW9CLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFzQixFQUFFLFlBQWtCO1FBQ3pELE1BQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0QsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQzthQUM5RCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLFVBQWtCLEVBQUUsVUFBa0I7UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQUVPLHVCQUF1QixDQUFDLEtBQWlCO1FBQy9DLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUV2RSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsT0FBTyxhQUFhLENBQUM7U0FDdEI7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxJQUFTO1FBQ2xDLElBQUksRUFBQyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUcsSUFBSSxDQUFDLFVBQVUsRUFBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUV2QyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO1NBQ3RCO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXBDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBZ0I7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLFFBQVEsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzs4RUFDTixDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVPLGVBQWU7UUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7OztZQTVFRixVQUFVOzs7WUFsQkYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgUG9Db21ib0ZpbHRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tYm9PcHRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tY29tYm8tb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1Jlc3BvbnNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXJlc3BvbnNlLmludGVyZmFjZSc7XG5pbXBvcnQgeyB2YWxpZGF0ZU9iamVjdFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1jb21iby5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ29tYm9GaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Db21ib0ZpbHRlciB7XG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuXG4gIGZpZWxkTGFiZWw6IHN0cmluZyA9ICdsYWJlbCc7XG4gIGZpZWxkVmFsdWU6IHN0cmluZyA9ICd2YWx1ZSc7XG5cbiAgcHJpdmF0ZSBtZXNzYWdlcyA9IFtdO1xuXG4gIGdldCB1cmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEZpbHRlcmVkRGF0YShwYXJhbTogYW55LCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPEFycmF5PFBvQ29tYm9PcHRpb24+PiB7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJhbS52YWx1ZTtcbiAgICBjb25zdCBmaWx0ZXJQYXJhbXNWYWxpZGF0ZWQgPSB2YWxpZGF0ZU9iamVjdFR5cGUoZmlsdGVyUGFyYW1zKTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IHsgLi4uZmlsdGVyUGFyYW1zVmFsaWRhdGVkLCBmaWx0ZXI6IHZhbHVlIH07XG5cbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KGAke3RoaXMudXJsfWAsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicsIHBhcmFtczogcGFyYW1zIH0pXG4gICAgICAucGlwZShtYXAoKHJlc3BvbnNlOiBQb1Jlc3BvbnNlKSA9PiB0aGlzLnBhcnNlVG9BcnJheUNvbWJvT3B0aW9uKHJlc3BvbnNlLml0ZW1zKSkpO1xuICB9XG5cbiAgZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPFBvQ29tYm9PcHRpb24+IHtcbiAgICBjb25zdCBmaWx0ZXJQYXJhbXNWYWxpZGF0ZWQgPSB2YWxpZGF0ZU9iamVjdFR5cGUoZmlsdGVyUGFyYW1zKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQoYCR7dGhpcy51cmx9LyR7dmFsdWV9YCwgeyBwYXJhbXM6IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCB9KVxuICAgICAgLnBpcGUobWFwKGl0ZW0gPT4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSkpKTtcbiAgfVxuXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcsIGZpZWxkTGFiZWw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0FycmF5Q29tYm9PcHRpb24oaXRlbXM6IEFycmF5PGFueT4pOiBBcnJheTxQb0NvbWJvT3B0aW9uPiB7XG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHBhcnNlZE9wdGlvbnMgPSBpdGVtcy5tYXAoaXRlbSA9PiB0aGlzLnBhcnNlVG9Db21ib09wdGlvbihpdGVtKSk7XG5cbiAgICAgIHRoaXMuZGlzcGxheU1lc3NhZ2VzKCk7XG5cbiAgICAgIHJldHVybiBwYXJzZWRPcHRpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW06IGFueSk6IFBvQ29tYm9PcHRpb24ge1xuICAgIGlmICghaXRlbT8uW3RoaXMuZmllbGRWYWx1ZV0pIHtcbiAgICAgIHRoaXMuYWRkTWVzc2FnZShpdGVtLCB0aGlzLmZpZWxkVmFsdWUpO1xuXG4gICAgICByZXR1cm4geyB2YWx1ZTogJycgfTtcbiAgICB9XG5cbiAgICBjb25zdCBsYWJlbCA9IGl0ZW1bdGhpcy5maWVsZExhYmVsXTtcbiAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcblxuICAgIHJldHVybiB7IGxhYmVsLCB2YWx1ZSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRNZXNzYWdlKGl0ZW0sIHByb3BlcnR5OiBzdHJpbmcpIHtcbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2goYENhbm5vdCByZWFkIHByb3BlcnR5IFwiJHtwcm9wZXJ0eX1cIiBvZiAke0pTT04uc3RyaW5naWZ5KGl0ZW0pfSxcbiAgICAgIHNlZSBbcC1maWVsZC12YWx1ZV0gcHJvcGVydHkgYXQgaHR0cHM6Ly9wby11aS5pby9kb2N1bWVudGF0aW9uL3BvLWNvbWJvYCk7XG4gIH1cblxuICBwcml2YXRlIGRpc3BsYXlNZXNzYWdlcygpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMuZm9yRWFjaChtZXNzYWdlID0+IGNvbnNvbGUuZXJyb3IobWVzc2FnZSkpO1xuXG4gICAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgfVxuICB9XG59XG4iXX0=
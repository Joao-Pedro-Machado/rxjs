import { __awaiter } from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../../services/po-notification/po-notification.service';
export class PoUploadDragDropDirective {
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(() => this.dragLeave.emit(), 30);
    }
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(() => {
                    this.sendFiles(event, this.files);
                });
            }
            else {
                const files = this.getOnlyFiles(event.dataTransfer.files);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    getFilesFromEntry(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            if (entry.isFile) {
                const file = yield this.readFile(entry);
                return [file];
            }
            else if (entry.isDirectory) {
                return yield this.readDirectory(entry);
            }
        });
    }
    getOnlyDirectories(dataTransferItems) {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = [];
            // lista todas as entradas antes de analisá-las
            for (const item of dataTransferItems) {
                entries.push(item.webkitGetAsEntry());
            }
            this.files = [];
            for (const entry of entries) {
                if (entry.isFile) {
                    this.invalidFileType++;
                }
                else {
                    const newFiles = yield this.getFilesFromEntry(entry);
                    this.files = this.files.concat(newFiles);
                }
            }
        });
    }
    // return only files. If it is a directory, invalidFileType counts.
    getOnlyFiles(fileList) {
        return Array.from(fileList).reduce((newFiles, file) => {
            if (file.type) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }, []);
    }
    readFile(entry) {
        return new Promise(resolve => {
            entry.file(file => {
                resolve(file);
            });
        });
    }
    readDirectory(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            const dirReader = entry.createReader();
            let files = [];
            let newFiles;
            newFiles = yield this.readDirectoryEntries(dirReader);
            files = files.concat(newFiles);
            return files;
        });
    }
    readDirectoryEntries(dirReader) {
        return new Promise(resolve => {
            dirReader.readEntries((entries) => __awaiter(this, void 0, void 0, function* () {
                let files = [];
                for (const entry of entries) {
                    const itemFiles = yield this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            }));
        });
    }
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    setPipeArguments(literalAttributes, args) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
}
PoUploadDragDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-upload-drag-drop]',
                providers: [PoI18nPipe]
            },] }
];
PoUploadDragDropDirective.ctorParameters = () => [
    { type: PoI18nPipe },
    { type: PoNotificationService }
];
PoUploadDragDropDirective.propDecorators = {
    areaElement: [{ type: Input, args: ['p-area-element',] }],
    directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    dragLeave: [{ type: Output, args: ['p-drag-leave',] }],
    dragOver: [{ type: Output, args: ['p-drag-over',] }],
    fileChange: [{ type: Output, args: ['p-file-change',] }],
    onDragLeave: [{ type: HostListener, args: ['document:dragleave', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['document:dragover', ['$event'],] }],
    onDrop: [{ type: HostListener, args: ['document:drop', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWRyYWctZHJvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1kcmFnLWRyb3AvcG8tdXBsb2FkLWRyYWctZHJvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQU9yRyxNQUFNLE9BQU8seUJBQXlCO0lBb0JwQyxZQUFvQixRQUFvQixFQUFVLFlBQW1DO1FBQWpFLGFBQVEsR0FBUixRQUFRLENBQVk7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBdUI7UUFON0QsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXhELGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUVwRCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFTyxDQUFDO0lBRXpDLFdBQVcsQ0FBQyxLQUFLO1FBQy9ELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRThDLFVBQVUsQ0FBQyxLQUFLO1FBQzdELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixLQUFLLENBQUMsZUFBZSxF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O3VCQUU5QixLQUFLLFNBQUMsWUFBWTt1QkFFbEIsS0FBSyxTQUFDLFlBQVk7d0JBRWxCLE1BQU0sU0FBQyxjQUFjO3VCQUVyQixNQUFNLFNBQUMsYUFBYTt5QkFFcEIsTUFBTSxTQUFDLGVBQWU7MEJBSXRCLFlBQVksU0FBQyxvQkFBb0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzt5QkFPN0MsWUFBWSxTQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDO3FCQVc1QyxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0kxOG5QaXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8taTE4bi9wby1pMThuLnBpcGUnO1xuaW1wb3J0IHsgUG9Ob3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tbm90aWZpY2F0aW9uL3BvLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBvVXBsb2FkTGl0ZXJhbHMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXVwbG9hZC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC11cGxvYWQtZHJhZy1kcm9wXScsXG4gIHByb3ZpZGVyczogW1BvSTE4blBpcGVdXG59KVxuZXhwb3J0IGNsYXNzIFBvVXBsb2FkRHJhZ0Ryb3BEaXJlY3RpdmUge1xuICB0aW1lb3V0OiBhbnk7XG5cbiAgcHJpdmF0ZSBmaWxlczogQXJyYXk8RmlsZT47XG4gIHByaXZhdGUgaW52YWxpZEZpbGVUeXBlOiBudW1iZXI7XG5cbiAgQElucHV0KCdwLWFyZWEtZWxlbWVudCcpIGFyZWFFbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICBASW5wdXQoJ3AtZGlyZWN0b3J5LWNvbXBhdGlibGUnKSBkaXJlY3RvcnlDb21wYXRpYmxlOiBib29sZWFuO1xuXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIGRpc2FibGVkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgncC1saXRlcmFscycpIGxpdGVyYWxzOiBQb1VwbG9hZExpdGVyYWxzO1xuXG4gIEBPdXRwdXQoJ3AtZHJhZy1sZWF2ZScpIGRyYWdMZWF2ZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBAT3V0cHV0KCdwLWRyYWctb3ZlcicpIGRyYWdPdmVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBPdXRwdXQoJ3AtZmlsZS1jaGFuZ2UnKSBmaWxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaTE4blBpcGU6IFBvSTE4blBpcGUsIHByaXZhdGUgbm90aWZpY2F0aW9uOiBQb05vdGlmaWNhdGlvblNlcnZpY2UpIHt9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6ZHJhZ2xlYXZlJywgWyckZXZlbnQnXSkgb25EcmFnTGVhdmUoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmRyYWdMZWF2ZS5lbWl0KCksIDMwKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmRyYWdvdmVyJywgWyckZXZlbnQnXSkgb25EcmFnT3ZlcihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcblxuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5kcmFnT3Zlci5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6ZHJvcCcsIFsnJGV2ZW50J10pIG9uRHJvcChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLmdldEZpbGVzRnJvbURhdGFUcmFuc2Zlckl0ZW1zKGV2ZW50KTtcbiAgICB0aGlzLmRyYWdMZWF2ZS5lbWl0KCk7XG4gIH1cblxuICBwcml2YXRlIGdldEZpbGVzRnJvbURhdGFUcmFuc2Zlckl0ZW1zKGV2ZW50OiBEcmFnRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuaW52YWxpZEZpbGVUeXBlID0gMDtcbiAgICAgIGlmICh0aGlzLmRpcmVjdG9yeUNvbXBhdGlibGUpIHtcbiAgICAgICAgdGhpcy5nZXRPbmx5RGlyZWN0b3JpZXMoZXZlbnQuZGF0YVRyYW5zZmVyLml0ZW1zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNlbmRGaWxlcyhldmVudCwgdGhpcy5maWxlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmdldE9ubHlGaWxlcyhldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMpO1xuICAgICAgICB0aGlzLnNlbmRGaWxlcyhldmVudCwgZmlsZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGFuYWxpc2EgYXMgZW50cmFkYXMgcmVjdXJzaXZhbWVudGVcbiAgcHJpdmF0ZSBhc3luYyBnZXRGaWxlc0Zyb21FbnRyeShlbnRyeSkge1xuICAgIGlmIChlbnRyeS5pc0ZpbGUpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLnJlYWRGaWxlKGVudHJ5KTtcbiAgICAgIHJldHVybiBbZmlsZV07XG4gICAgfSBlbHNlIGlmIChlbnRyeS5pc0RpcmVjdG9yeSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVhZERpcmVjdG9yeShlbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZXRPbmx5RGlyZWN0b3JpZXMoZGF0YVRyYW5zZmVySXRlbXMpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gW107XG5cbiAgICAvLyBsaXN0YSB0b2RhcyBhcyBlbnRyYWRhcyBhbnRlcyBkZSBhbmFsaXPDoS1sYXNcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YVRyYW5zZmVySXRlbXMpIHtcbiAgICAgIGVudHJpZXMucHVzaChpdGVtLndlYmtpdEdldEFzRW50cnkoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgaWYgKGVudHJ5LmlzRmlsZSkge1xuICAgICAgICB0aGlzLmludmFsaWRGaWxlVHlwZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV3RmlsZXMgPSBhd2FpdCB0aGlzLmdldEZpbGVzRnJvbUVudHJ5KGVudHJ5KTtcbiAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMuZmlsZXMuY29uY2F0KG5ld0ZpbGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyByZXR1cm4gb25seSBmaWxlcy4gSWYgaXQgaXMgYSBkaXJlY3RvcnksIGludmFsaWRGaWxlVHlwZSBjb3VudHMuXG4gIHByaXZhdGUgZ2V0T25seUZpbGVzKGZpbGVMaXN0OiBGaWxlTGlzdCk6IEFycmF5PEZpbGU+IHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShmaWxlTGlzdCkucmVkdWNlKChuZXdGaWxlcywgZmlsZSkgPT4ge1xuICAgICAgaWYgKGZpbGUudHlwZSkge1xuICAgICAgICByZXR1cm4gbmV3RmlsZXMuY29uY2F0KGZpbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbnZhbGlkRmlsZVR5cGUrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdGaWxlcztcbiAgICB9LCBbXSk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRGaWxlKGVudHJ5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgZW50cnkuZmlsZShmaWxlID0+IHtcbiAgICAgICAgcmVzb2x2ZShmaWxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZWFkRGlyZWN0b3J5KGVudHJ5KSB7XG4gICAgY29uc3QgZGlyUmVhZGVyID0gZW50cnkuY3JlYXRlUmVhZGVyKCk7XG4gICAgbGV0IGZpbGVzID0gW107XG4gICAgbGV0IG5ld0ZpbGVzO1xuXG4gICAgbmV3RmlsZXMgPSBhd2FpdCB0aGlzLnJlYWREaXJlY3RvcnlFbnRyaWVzKGRpclJlYWRlcik7XG4gICAgZmlsZXMgPSBmaWxlcy5jb25jYXQobmV3RmlsZXMpO1xuICAgIHJldHVybiBmaWxlcztcbiAgfVxuXG4gIHByaXZhdGUgcmVhZERpcmVjdG9yeUVudHJpZXMoZGlyUmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgZGlyUmVhZGVyLnJlYWRFbnRyaWVzKGFzeW5jIGVudHJpZXMgPT4ge1xuICAgICAgICBsZXQgZmlsZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgY29uc3QgaXRlbUZpbGVzID0gYXdhaXQgdGhpcy5nZXRGaWxlc0Zyb21FbnRyeShlbnRyeSk7XG4gICAgICAgICAgZmlsZXMgPSBmaWxlcy5jb25jYXQoaXRlbUZpbGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGZpbGVzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZW5kRmVlZGJhY2soaW52YWxpZEZpbGVzOiBudW1iZXIpIHtcbiAgICBpZiAoaW52YWxpZEZpbGVzKSB7XG4gICAgICB0aGlzLnNldFBpcGVBcmd1bWVudHMoJ2ludmFsaWRGaWxlVHlwZScsIGludmFsaWRGaWxlcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZW5kRmlsZXMoZXZlbnQsIGZpbGVzKSB7XG4gICAgaWYgKHRoaXMuYXJlYUVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5maWxlQ2hhbmdlLmVtaXQoZmlsZXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlbmRGZWVkYmFjayh0aGlzLmludmFsaWRGaWxlVHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGludmFsaWREcm9wQXJlYUFyZyA9IHRoaXMuZGlyZWN0b3J5Q29tcGF0aWJsZSA/IHRoaXMubGl0ZXJhbHMuZm9sZGVycyA6IHRoaXMubGl0ZXJhbHMuZmlsZXM7XG4gICAgICB0aGlzLnNldFBpcGVBcmd1bWVudHMoJ2ludmFsaWREcm9wQXJlYScsIGludmFsaWREcm9wQXJlYUFyZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gbcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHNldGFyIG9zIGFyZ3VtZW50b3MgZG8gaTE4blBpcGUuXG4gIHByaXZhdGUgc2V0UGlwZUFyZ3VtZW50cyhsaXRlcmFsQXR0cmlidXRlczogc3RyaW5nLCBhcmdzPykge1xuICAgIGNvbnN0IHBpcGVBcmd1bWVudHMgPSB0aGlzLmkxOG5QaXBlLnRyYW5zZm9ybSh0aGlzLmxpdGVyYWxzW2xpdGVyYWxBdHRyaWJ1dGVzXSwgYXJncyk7XG4gICAgdGhpcy5ub3RpZmljYXRpb24uaW5mb3JtYXRpb24ocGlwZUFyZ3VtZW50cyk7XG4gIH1cbn1cbiJdfQ==
import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, uuid } from './../../../utils/util';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
 */
export class PoCheckboxBaseComponent {
    constructor() {
        this.id = uuid();
        this._disabled = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Evento disparado quando o valor do *checkbox* for alterado. */
        this.change = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
    changeValue() {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    }
    checkOption(value) {
        if (!this.disabled) {
            this.changeModelValue(!value);
            this.changeValue();
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) { }
    writeValue(value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    }
}
PoCheckboxBaseComponent.decorators = [
    { type: Directive }
];
PoCheckboxBaseComponent.propDecorators = {
    name: [{ type: Input, args: ['name',] }],
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    label: [{ type: Input, args: ['p-label',] }],
    change: [{ type: Output, args: ['p-change',] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY2hlY2tib3gvcG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRDs7Ozs7Ozs7OztHQVVHO0FBRUgsTUFBTSxPQUFnQix1QkFBdUI7SUFEN0M7UUFHRSxPQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFHSixjQUFTLEdBQWEsS0FBSyxDQUFDO1FBS3BDOzs7Ozs7Ozs7O1dBVUc7UUFDb0MsY0FBUyxHQUFZLEtBQUssQ0FBQztRQXNCbEUsa0VBQWtFO1FBQzlDLFdBQU0sR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQThCM0UsQ0FBQztJQW5EQzs7Ozs7Ozs7T0FRRztJQUNILElBQXlCLFFBQVEsQ0FBQyxLQUFjO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBUUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMxQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsV0FBVyxDQUFDLEtBQXFCO1FBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFPLElBQVMsQ0FBQztJQUVuQyxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7OztZQXhFRixTQUFTOzs7bUJBU1AsS0FBSyxTQUFDLE1BQU07d0JBYVosS0FBSyxTQUFDLGNBQWM7dUJBV3BCLEtBQUssU0FBQyxZQUFZO29CQVNsQixLQUFLLFNBQUMsU0FBUztxQkFHZixNQUFNLFNBQUMsVUFBVTs7QUF2QnFCO0lBQWYsWUFBWSxFQUFFOzswREFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4sIHV1aWQgfSBmcm9tICcuLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vLi4vLi4vZGVjb3JhdG9ycyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1jaGVja2JveGAgZXhpYmUgdW1hIGNhaXhhIGRlIG9ww6fDo28gY29tIHVtIHRleHRvIGFvIGxhZG8sIG5hIHF1YWwgw6kgcG9zc8OtdmVsIG1hcmNhciBlIGRlc21hcmNhciBhdHJhdsOpcyB0YW50b1xuICogbm8gKmNsaWNrKiBkbyAqbW91c2UqIHF1YW50byBwb3IgbWVpbyBkYSB0ZWNsYSAqc3BhY2UqIHF1YW5kbyBlc3RpdmVyIGNvbSBmb2NvLlxuICpcbiAqIENhZGEgb3DDp8OjbyBwb2RlcsOhIHJlY2ViZXIgdW0gZXN0YWRvIGRlIG1hcmNhZG8sIGRlc21hcmNhZG8sIGluZGV0ZXJtaW5hZG8gZSBkZXNhYmlsaXRhZG8sIGNvbW8gdGFtYsOpbSB1bWEgYcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvXG4gKiBvY29ycmVyIG11ZGFuw6dhcyBkbyB2YWxvci5cbiAqXG4gKiA+IE8gKm1vZGVsKiBkZXN0ZSBjb21wb25lbnRlIGFjZWl0YXLDoSB2YWxvcmVzIGlndWFsIMOgIGB0cnVlYCwgYGZhbHNlYCBvdSBgbnVsbGAgcGFyYSBxdWFuZG8gZm9yIGluZGV0ZXJtaW5hZG8uXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hlY2tib3hCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBjaGVja2JveFZhbHVlOiBib29sZWFuIHwgbnVsbDtcbiAgaWQgPSB1dWlkKCk7XG4gIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xuXG4gIHByaXZhdGUgX2Rpc2FibGVkPzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBEZWZpbmUgbyBub21lIGRvICpjaGVja2JveCouICovXG4gIEBJbnB1dCgnbmFtZScpIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcGxpY2EgZm9jbyBubyBlbGVtZW50byBhbyBzZXIgaW5pY2lhZG8uXG4gICAqXG4gICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsIGFwZW5hcyBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtYXV0by1mb2N1cycpIEBJbnB1dEJvb2xlYW4oKSBhdXRvRm9jdXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBlc3RhZG8gZG8gKmNoZWNrYm94KiBjb21vIGRlc2FiaWxpdGFkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWRpc2FibGVkJykgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cblxuICAvKiogVGV4dG8gZGUgZXhpYmnDp8OjbyBkbyAqY2hlY2tib3gqLiAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbD86IHN0cmluZztcblxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBxdWFuZG8gbyB2YWxvciBkbyAqY2hlY2tib3gqIGZvciBhbHRlcmFkby4gKi9cbiAgQE91dHB1dCgncC1jaGFuZ2UnKSBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNoYW5nZVZhbHVlKCkge1xuICAgIGlmICh0aGlzLnByb3BhZ2F0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy5jaGVja2JveFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoYW5nZS5lbWl0KHRoaXMuY2hlY2tib3hWYWx1ZSk7XG4gIH1cblxuICBjaGVja09wdGlvbih2YWx1ZTogYm9vbGVhbiB8IG51bGwpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2hhbmdlTW9kZWxWYWx1ZSghdmFsdWUpO1xuICAgICAgdGhpcy5jaGFuZ2VWYWx1ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7fVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5jaGVja2JveFZhbHVlKSB7XG4gICAgICB0aGlzLmNoYW5nZU1vZGVsVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjaGFuZ2VNb2RlbFZhbHVlKHZhbHVlOiBib29sZWFuIHwgbnVsbCk7XG59XG4iXX0=
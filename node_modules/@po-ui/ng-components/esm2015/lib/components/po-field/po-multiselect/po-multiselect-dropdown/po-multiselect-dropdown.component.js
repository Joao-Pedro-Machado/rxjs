import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { PoMultiselectSearchComponent } from './../po-multiselect-search/po-multiselect-search.component';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export class PoMultiselectDropdownComponent {
    constructor() {
        this.scrollTop = 0;
        this.show = false;
        /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
        this.hideSearch = false;
        /** Propriedade que recebe a lista de opções selecionadas. */
        this.selectedValues = [];
        /** Propriedade que recebe a lista com todas as opções. */
        this.options = [];
        /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
        this.visibleOptions = [];
        /** Evento disparado a cada tecla digitada na pesquisa. */
        this.changeSearch = new EventEmitter();
        /** Evento disparado a cada alteração na lista das opções selecionadas. */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
    }
    get hasOptions() {
        var _a;
        return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
    }
    isSelectedItem(option) {
        return this.selectedValues.some(selectedItem => selectedItem === option.value);
    }
    clickItem(check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedValues.push(option.value);
        }
        else {
            const indexSelectedValues = this.selectedValues.indexOf(option.value);
            this.selectedValues.splice(indexSelectedValues, 1);
        }
        this.change.emit(this.selectedValues);
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    onKeydown(event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.searchElement && !this.hideSearch) {
                this.searchElement.setFocus();
                this.searchElement.clean();
            }
        });
    }
}
PoMultiselectDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-multiselect-dropdown',
                template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <po-multiselect-search\n    #searchElement\n    *ngIf=\"!hideSearch && hasOptions\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\"\n  >\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!visibleOptions.length\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <po-multiselect-item\n      *ngFor=\"let option of visibleOptions\"\n      [p-label]=\"option.label\"\n      [p-selected]=\"isSelectedItem(option)\"\n      (p-change)=\"clickItem($event, option)\"\n    >\n    </po-multiselect-item>\n  </ul>\n</div>\n"
            },] }
];
PoMultiselectDropdownComponent.propDecorators = {
    hideSearch: [{ type: Input, args: ['p-hide-search',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
    selectedValues: [{ type: Input, args: ['p-selected-values',] }],
    options: [{ type: Input, args: ['p-options',] }],
    visibleOptions: [{ type: Input, args: ['p-visible-options',] }],
    changeSearch: [{ type: Output, args: ['p-change-search',] }],
    change: [{ type: Output, args: ['p-change',] }],
    closeDropdown: [{ type: Output, args: ['p-close-dropdown',] }],
    container: [{ type: ViewChild, args: ['container', { read: ElementRef, static: true },] }],
    ulElement: [{ type: ViewChild, args: ['ulElement', { read: ElementRef, static: true },] }],
    searchElement: [{ type: ViewChild, args: ['searchElement',] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,
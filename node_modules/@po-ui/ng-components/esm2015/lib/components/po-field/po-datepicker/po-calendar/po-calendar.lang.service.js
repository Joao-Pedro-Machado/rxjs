import { Injectable } from '@angular/core';
export class PoCalendarLangService {
    constructor() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'pt';
    }
    setLanguage(lang) {
        if (lang && lang.length >= 2) {
            lang = lang.toLowerCase().slice(0, 2);
            this.lang = lang === 'pt' || lang === 'en' || lang === 'es' ? lang : 'pt';
        }
    }
    getWordMonth() {
        return this.wordMonth[this.lang];
    }
    getWordYear() {
        return this.wordYear[this.lang];
    }
    getMonth(month) {
        return this.months[month][this.lang];
    }
    getArrayMonths() {
        const arrMonths = Array();
        for (let i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    }
    getWeedDays(day) {
        return this.shortWeekDays[day][this.lang];
    }
    getArrayWeekDays() {
        const arrWeekDays = Array();
        for (let i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    }
}
PoCalendarLangService.decorators = [
    { type: Injectable }
];
PoCalendarLangService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWRhdGVwaWNrZXIvcG8tY2FsZW5kYXIvcG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsTUFBTSxPQUFPLHFCQUFxQjtJQW9IaEM7UUFuSEEsV0FBTSxHQUFHO1lBQ1A7Z0JBQ0UsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxXQUFXO2dCQUNmLEVBQUUsRUFBRSxVQUFVO2dCQUNkLEVBQUUsRUFBRSxTQUFTO2FBQ2Q7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxNQUFNO2dCQUNWLEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxNQUFNO2FBQ1g7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsTUFBTTtnQkFDVixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLE9BQU87YUFDWjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxRQUFRO2dCQUNaLEVBQUUsRUFBRSxRQUFRO2dCQUNaLEVBQUUsRUFBRSxRQUFRO2FBQ2I7WUFDRDtnQkFD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QUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsTUFBTSxXQUFXLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7OztZQTVKRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhckxhbmdTZXJ2aWNlIHtcbiAgbW9udGhzID0gW1xuICAgIHtcbiAgICAgIHB0OiAnSmFuZWlybycsXG4gICAgICBlbjogJ0phbnVhcnknLFxuICAgICAgZXM6ICdFbmVybydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnRmV2ZXJlaXJvJyxcbiAgICAgIGVuOiAnRmVicnVhcnknLFxuICAgICAgZXM6ICdGZWJyZXJvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdNYXLDp28nLFxuICAgICAgZW46ICdNYXJjaCcsXG4gICAgICBlczogJ01hcnpvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdBYnJpbCcsXG4gICAgICBlbjogJ0FwcmlsJyxcbiAgICAgIGVzOiAnQWJyaWwnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ01haW8nLFxuICAgICAgZW46ICdNYXknLFxuICAgICAgZXM6ICdNYXlvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdKdW5obycsXG4gICAgICBlbjogJ0p1bmUnLFxuICAgICAgZXM6ICdKdW5pbydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnSnVsaG8nLFxuICAgICAgZW46ICdKdWx5JyxcbiAgICAgIGVzOiAnSnVsaW8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0Fnb3N0bycsXG4gICAgICBlbjogJ0F1Z3VzdCcsXG4gICAgICBlczogJ0Fnb3N0bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2V0ZW1icm8nLFxuICAgICAgZW46ICdTZXB0ZW1iZXInLFxuICAgICAgZXM6ICdTZXRpZW1icmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ091dHVicm8nLFxuICAgICAgZW46ICdPY3RvYmVyJyxcbiAgICAgIGVzOiAnT2N0dWJyZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnTm92ZW1icm8nLFxuICAgICAgZW46ICdOb3ZlbWJlcicsXG4gICAgICBlczogJ05vdmllbWJyZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnRGV6ZW1icm8nLFxuICAgICAgZW46ICdEZWNlbWJlcicsXG4gICAgICBlczogJ0RpY2llbWJyZSdcbiAgICB9XG4gIF07XG5cbiAgc2hvcnRXZWVrRGF5cyA9IFtcbiAgICB7XG4gICAgICBwdDogJ0RvbScsXG4gICAgICBlbjogJ1N1bicsXG4gICAgICBlczogJ0RvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2VnJyxcbiAgICAgIGVuOiAnTW9uJyxcbiAgICAgIGVzOiAnTHVuJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdUZXInLFxuICAgICAgZW46ICdUdWUnLFxuICAgICAgZXM6ICdNYXInXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1F1YScsXG4gICAgICBlbjogJ1dlZCcsXG4gICAgICBlczogJ01pw6knXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1F1aScsXG4gICAgICBlbjogJ1RodScsXG4gICAgICBlczogJ0p1ZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU2V4JyxcbiAgICAgIGVuOiAnRnJpJyxcbiAgICAgIGVzOiAnVmllJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdTw6FiJyxcbiAgICAgIGVuOiAnU2F0JyxcbiAgICAgIGVzOiAnU8OhYidcbiAgICB9XG4gIF07XG5cbiAgd29yZE1vbnRoID0ge1xuICAgIHB0OiAnTcOqcycsXG4gICAgZW46ICdNb250aCcsXG4gICAgZXM6ICdNZXMnXG4gIH07XG5cbiAgd29yZFllYXIgPSB7XG4gICAgcHQ6ICdBbm8nLFxuICAgIGVuOiAnWWVhcicsXG4gICAgZXM6ICdBw7FvJ1xuICB9O1xuXG4gIGxhbmcgPSAncHQnO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBzZXRMYW5ndWFnZShsYW5nOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZyAmJiBsYW5nLmxlbmd0aCA+PSAyKSB7XG4gICAgICBsYW5nID0gbGFuZy50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDIpO1xuICAgICAgdGhpcy5sYW5nID0gbGFuZyA9PT0gJ3B0JyB8fCBsYW5nID09PSAnZW4nIHx8IGxhbmcgPT09ICdlcycgPyBsYW5nIDogJ3B0JztcbiAgICB9XG4gIH1cblxuICBnZXRXb3JkTW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZE1vbnRoW3RoaXMubGFuZ107XG4gIH1cblxuICBnZXRXb3JkWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy53b3JkWWVhclt0aGlzLmxhbmddO1xuICB9XG5cbiAgZ2V0TW9udGgobW9udGg6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLm1vbnRoc1ttb250aF1bdGhpcy5sYW5nXTtcbiAgfVxuXG4gIGdldEFycmF5TW9udGhzKCkge1xuICAgIGNvbnN0IGFyck1vbnRocyA9IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1vbnRocy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyTW9udGhzLnB1c2godGhpcy5tb250aHNbaV1bdGhpcy5sYW5nXSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJNb250aHM7XG4gIH1cblxuICBnZXRXZWVkRGF5cyhkYXk6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnNob3J0V2Vla0RheXNbZGF5XVt0aGlzLmxhbmddO1xuICB9XG5cbiAgZ2V0QXJyYXlXZWVrRGF5cygpIHtcbiAgICBjb25zdCBhcnJXZWVrRGF5cyA9IEFycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNob3J0V2Vla0RheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycldlZWtEYXlzLnB1c2godGhpcy5zaG9ydFdlZWtEYXlzW2ldW3RoaXMubGFuZ10pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyV2Vla0RheXM7XG4gIH1cbn1cbiJdfQ==
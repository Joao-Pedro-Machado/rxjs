import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
export class PoCalendarService {
    constructor() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
}
PoCalendarService.decorators = [
    { type: Injectable }
];
PoCalendarService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1kYXRlcGlja2VyL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUczRCxNQUFNLE9BQU8saUJBQWlCO0lBRzVCO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBUztRQUNyQixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLGVBQW9CLElBQUksRUFBRSxnQkFBcUIsSUFBSTtRQUNuRixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxFQUFFLEVBQUU7WUFDeEQsTUFBTSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUNsRDtRQUVELE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksR0FBZSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFaEMsR0FBRztZQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNsQztZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELElBQUksR0FBRyxFQUFFLENBQUM7U0FDWCxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBUyxFQUFFLEtBQVU7UUFDN0IsTUFBTSxZQUFZLEdBQUcsVUFBVSxJQUFTO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7O1lBN0NGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHNldFllYXJGcm9tMFRvMTAwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyU2VydmljZSB7XG4gIGZpcnN0V2Vla0RheTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZmlyc3RXZWVrRGF5ID0gMDsgLy8gMCA9IHN1bmRheVxuICB9XG5cbiAgd2Vla1N0YXJ0RGF0ZShkYXRlOiBhbnkpIHtcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgd2hpbGUgKHN0YXJ0RGF0ZS5nZXREYXkoKSAhPT0gdGhpcy5maXJzdFdlZWtEYXkpIHtcbiAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0RGF0ZTtcbiAgfVxuXG4gIG1vbnRoRGF0ZXMoeWVhcjogYW55LCBtb250aDogYW55LCBkYXlGb3JtYXR0ZXI6IGFueSA9IG51bGwsIHdlZWtGb3JtYXR0ZXI6IGFueSA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIG1vbnRoICE9PSAnbnVtYmVyJyB8fCBtb250aCA8IDAgfHwgbW9udGggPiAxMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ21vbnRoIG11c3QgYmUgYSBudW1iZXIgKEphbiBpcyAwKScpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlZWtzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IHdlZWs6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG4gICAgc2V0WWVhckZyb20wVG8xMDAoZGF0ZSwgeWVhcik7XG4gICAgZGF0ZSA9IHRoaXMud2Vla1N0YXJ0RGF0ZShkYXRlKTtcblxuICAgIGRvIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgd2Vlay5wdXNoKGRheUZvcm1hdHRlciA/IGRheUZvcm1hdHRlcihkYXRlKSA6IGRhdGUpO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHdlZWtzLnB1c2god2Vla0Zvcm1hdHRlciA/IHdlZWtGb3JtYXR0ZXIod2VlaykgOiB3ZWVrKTtcbiAgICAgIHdlZWsgPSBbXTtcbiAgICB9IHdoaWxlIChkYXRlLmdldE1vbnRoKCkgPD0gbW9udGggJiYgZGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyKTtcbiAgICByZXR1cm4gd2Vla3M7XG4gIH1cblxuICBtb250aERheXMoeWVhcjogYW55LCBtb250aDogYW55KSB7XG4gICAgY29uc3QgZ2V0RGF5T3JaZXJvID0gZnVuY3Rpb24gKGRhdGU6IGFueSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGggPyBkYXRlIDogMDtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1vbnRoRGF0ZXMoeWVhciwgbW9udGgsIGdldERheU9yWmVybyk7XG4gIH1cbn1cbiJdfQ==
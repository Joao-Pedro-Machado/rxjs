import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
const poCalendarLocaleDefault = 'pt';
const poCalendarLocales = ['pt', 'en', 'es'];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
export class PoCalendarComponent {
    constructor(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Data máxima possível de ser selecionada no calendário.
     */
    set dateEnd(val) {
        if (val && val instanceof Date) {
            const year = val.getFullYear();
            const month = val.getMonth();
            const day = val.getDate();
            const date = new Date(year, month, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            this._dateEnd = date;
        }
        else {
            this._dateEnd = undefined;
        }
    }
    get dateEnd() {
        return this._dateEnd;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    set locale(locale) {
        this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data selecionada no calendário.
     */
    set selectedDate(selectedDate) {
        this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
    }
    get selectedDate() {
        return this._selectedDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data mínima possível de ser selecionada no calendário.
     */
    set dateStart(val) {
        if (val && val instanceof Date) {
            const year = val.getFullYear();
            const month = val.getMonth();
            const day = val.getDate();
            const date = new Date(year, month, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            this._dateStart = date;
        }
        else {
            this._dateStart = undefined;
        }
    }
    get dateStart() {
        return this._dateStart;
    }
    close() {
        this.overlayInvisible = true;
        this.visible = false;
    }
    // Obtém um array de todos os anos desta década
    getArrayDecade(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    getBackgroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    getDayBackgroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    }
    getDayForegroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    }
    getForegroundColor(displayValue, propertyValue) {
        return displayValue === propertyValue ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    getWordMonth() {
        return this.poCalendarLangService.getWordMonth();
    }
    getWordYear() {
        return this.poCalendarLangService.getWordYear();
    }
    init() {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    }
    onNextMonth() {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    }
    onPrevMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    }
    // Ao selecionar uma data
    onSelectDate(date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    }
    // Ao selecionar um mês
    onSelectMonth(year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    }
    // Ao selecionar um ano
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    }
    selectDay() {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    }
    selectMonth() {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    }
    selectYear() {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    }
    setMobileVisualization() {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    }
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    addAllYearsInDecade(year) {
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    equalsDate(date1, date2) {
        try {
            return (date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate());
        }
        catch (error) {
            return false;
        }
    }
    updateDate(date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    updateDisplay(year, month) {
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    }
}
PoCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-calendar',
                template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n          {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div\n          *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day po-calendar-box-background\"\n          (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n        >\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div\n          *ngFor=\"let month of displayMonths; let i = index\"\n          class=\"po-calendar-month\"\n          (click)=\"onSelectMonth(displayYear, i)\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">{{ displayStartDecade }} - {{ displayFinalDecade }}</div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div\n          *ngFor=\"let year of displayDecade; let i = index\"\n          class=\"po-calendar-year\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          attr-calendar\n        >\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [PoCalendarService, PoCalendarLangService]
            },] }
];
PoCalendarComponent.ctorParameters = () => [
    { type: PoCalendarService },
    { type: PoCalendarLangService }
];
PoCalendarComponent.propDecorators = {
    elDays: [{ type: ViewChild, args: ['days', { read: ElementRef, static: true },] }],
    elMonths: [{ type: ViewChild, args: ['months', { read: ElementRef, static: true },] }],
    elYears: [{ type: ViewChild, args: ['years', { read: ElementRef, static: true },] }],
    dateEnd: [{ type: Input, args: ['p-date-end',] }],
    locale: [{ type: Input, args: ['p-locale',] }],
    selectedDate: [{ type: Input, args: ['p-selected-date',] }],
    dateStart: [{ type: Input, args: ['p-date-start',] }],
    selectedDateChange: [{ type: Output, args: ['p-selected-dateChange',] }],
    submit: [{ type: Output, args: ['p-submit',] }]
};
//# sourceMappingURL=data:application/json;base64,
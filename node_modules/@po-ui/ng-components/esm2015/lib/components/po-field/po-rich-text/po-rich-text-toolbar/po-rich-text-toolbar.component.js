import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
const poRichTextDefaultColor = '#000000';
export class PoRichTextToolbarComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: `${this.literals.insertLink} (Ctrl + K)`,
                action: () => this.modal.emit(PoRichTextModalType.Link)
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: () => this.modal.emit(PoRichTextModalType.Image)
            }
        ];
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
    }
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    get readonly() {
        return this._readonly;
    }
    get isInternetExplorer() {
        return isIE();
    }
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    changeTextColor(value) {
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach(button => (button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    shortcutTrigger() {
        this.modal.emit(PoRichTextModalType.Link);
    }
    emitAlignCommand(command) {
        const index = this.alignButtons.findIndex(btn => btn.command === command);
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    emitCommand(command) {
        this.command.emit(command);
    }
    removeButtonFocus() {
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach(button => button.setAttribute('tabindex', '-1'));
    }
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    toggleDisableButtons(state) {
        this.alignButtons.forEach(button => (button.disabled = state));
        this.formatButtons.forEach(button => (button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
}
PoRichTextToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-toolbar',
                template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\"> </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button\n        class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\"\n      >\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\"\n        />\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"linkButtons\"> </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"mediaButtons\"> </po-button-group>\n  </div>\n</div>\n"
            },] }
];
PoRichTextToolbarComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextToolbarComponent.propDecorators = {
    colorPickerInput: [{ type: ViewChild, args: ['colorPickerInput', { read: ElementRef },] }],
    toolbarElement: [{ type: ViewChild, args: ['toolbarElement', { static: true },] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    command: [{ type: Output, args: ['p-command',] }],
    modal: [{ type: Output, args: ['p-modal',] }]
};
//# sourceMappingURL=data:application/json;base64,
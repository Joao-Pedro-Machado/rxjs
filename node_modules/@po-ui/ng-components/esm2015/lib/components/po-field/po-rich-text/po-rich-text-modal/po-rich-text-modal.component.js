import { __awaiter } from "tslib";
import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { convertImageToBase64, isExternalLink, isIE } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoModalComponent } from '../../../po-modal';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
import { PoUploadComponent } from '../../po-upload/po-upload.component';
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
export class PoRichTextModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
        this.modalLinkConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => (this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText))
        };
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
    }
    get modalTitle() {
        if (this.modalType === 'image') {
            return this.literals.insertImage;
        }
        return this.linkConfirmAction();
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    get modalPrimaryAction() {
        return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
    }
    convertToBase64() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    emitCommand(value) {
        let command;
        if (value && this.modalType === PoRichTextModalType.Image) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    formModelValidate() {
        return (this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid);
    }
    insertElementRef() {
        return __awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (this.modalType === PoRichTextModalType.Image && !this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    openModal(type) {
        this.modalType = type;
        this.saveCursorPosition();
        if (this.modalType === PoRichTextModalType.Link) {
            this.prepareModalForLink();
            this.modalLinkConfirmAction.label = this.linkConfirmAction();
        }
        this.modal.open();
    }
    selectedLink(event) {
        this.isSelectedLink = !!event;
        this.linkElement = event;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.uploadModel = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink() {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => {
            this.formModelValidate();
        });
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
}
PoRichTextModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-modal',
                template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalPrimaryAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"modalTitle\"\n>\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\n</po-modal>\n\n<ng-template #modalImage>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template #modalLink>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</ng-template>\n"
            },] }
];
PoRichTextModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextModalComponent.propDecorators = {
    modal: [{ type: ViewChild, args: ['modal', { static: true },] }],
    modalImageForm: [{ type: ViewChild, args: ['modalImageForm',] }],
    upload: [{ type: ViewChild, args: ['upload', { static: true },] }],
    modalImage: [{ type: ViewChild, args: ['modalImage', { static: true },] }],
    modalLink: [{ type: ViewChild, args: ['modalLink', { static: true },] }],
    modalLinkForm: [{ type: ViewChild, args: ['modalLinkForm',] }],
    command: [{ type: Output, args: ['p-command',] }],
    linkEditing: [{ type: Output, args: ['p-link-editing',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yaWNoLXRleHQvcG8tcmljaC10ZXh0LW1vZGFsL3BvLXJpY2gtdGV4dC1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBbUIsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFekQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUUzRixPQUFPLEVBQWlCLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHeEUsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQU05RixNQUFNLE9BQU8sd0JBQXdCO0lBK0VuQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUE1RXRELGNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEMsdUJBQWtCLEdBQTZCO1lBQzdD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QUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsZzREQUFrRDthQUNuRDs7O1lBYlEsaUJBQWlCOzs7b0JBNkV2QixTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs2QkFFbkMsU0FBUyxTQUFDLGdCQUFnQjtxQkFFMUIsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7eUJBRXBDLFNBQVMsU0FBQyxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3dCQUV4QyxTQUFTLFNBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs0QkFFdkMsU0FBUyxTQUFDLGVBQWU7c0JBRXpCLE1BQU0sU0FBQyxXQUFXOzBCQUVsQixNQUFNLFNBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgY29udmVydEltYWdlVG9CYXNlNjQsIGlzRXh0ZXJuYWxMaW5rLCBpc0lFIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvTW9kYWxBY3Rpb24sIFBvTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi9wby1tb2RhbCc7XG5pbXBvcnQgeyBwb1JpY2hUZXh0TGl0ZXJhbHNEZWZhdWx0IH0gZnJvbSAnLi4vcG8tcmljaC10ZXh0LWxpdGVyYWxzJztcbmltcG9ydCB7IFBvUmljaFRleHRNb2RhbFR5cGUgfSBmcm9tICcuLi9lbnVtcy9wby1yaWNoLXRleHQtbW9kYWwtdHlwZS5lbnVtJztcbmltcG9ydCB7IFBvVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcG8tdXBsb2FkL3BvLXVwbG9hZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zIH0gZnJvbSAnLi4vLi4vcG8tdXBsb2FkL2ludGVyZmFjZXMvcG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb24uaW50ZXJmYWNlJztcblxuY29uc3QgdXBsb2FkUmVzdHJpY3Rpb25zID0gWycuYXBuZycsICcuYm1wJywgJy5naWYnLCAnLmljbycsICcuanBlZycsICcuanBnJywgJy5wbmcnLCAnLnN2ZyddO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1yaWNoLXRleHQtbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcmljaC10ZXh0LW1vZGFsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1JpY2hUZXh0TW9kYWxDb21wb25lbnQge1xuICBtb2RhbFR5cGU6IFBvUmljaFRleHRNb2RhbFR5cGU7XG4gIHNhdmVkQ3Vyc29yUG9zaXRpb247XG4gIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICB1cGxvYWRNb2RlbDogQXJyYXk8YW55PjtcbiAgdXBsb2FkUmVzdHJpY3Rpb25zOiBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnMgPSB7XG4gICAgYWxsb3dlZEV4dGVuc2lvbnM6IHVwbG9hZFJlc3RyaWN0aW9uc1xuICB9O1xuICB1cmxJbWFnZTogc3RyaW5nO1xuICB1cmxMaW5rOiBzdHJpbmc7XG4gIHVybExpbmtUZXh0OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBpc0xpbmtFZGl0aW5nOiBib29sZWFuO1xuICBwcml2YXRlIGlzU2VsZWN0ZWRMaW5rOiBib29sZWFuO1xuICBwcml2YXRlIGxpbmtFbGVtZW50OiBhbnk7XG4gIHByaXZhdGUgc2F2ZWRTZWxlY3Rpb246IFJhbmdlIHwgbnVsbDtcblxuICByZWFkb25seSBsaXRlcmFscyA9IHtcbiAgICAuLi5wb1JpY2hUZXh0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKV1cbiAgfTtcblxuICBtb2RhbENhbmNlbEFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHtcbiAgICBsYWJlbDogdGhpcy5saXRlcmFscy5jYW5jZWwsXG4gICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICB0aGlzLm1vZGFsLmNsb3NlKCk7XG4gICAgICB0aGlzLmNvbW1hbmQuZW1pdCgpO1xuICAgICAgdGhpcy5yZXRyaWV2ZUN1cnNvclBvc2l0aW9uKCk7XG4gICAgICB0aGlzLmNsZWFuVXBGaWVsZHMoKTtcbiAgICB9XG4gIH07XG5cbiAgbW9kYWxDb25maXJtQWN0aW9uOiBQb01vZGFsQWN0aW9uID0ge1xuICAgIGxhYmVsOiB0aGlzLmxpdGVyYWxzLmluc2VydCxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgYWN0aW9uOiAoKSA9PiB0aGlzLmluc2VydEVsZW1lbnRSZWYoKVxuICB9O1xuXG4gIG1vZGFsTGlua0NvbmZpcm1BY3Rpb24gPSB7XG4gICAgbGFiZWw6IHRoaXMubGlua0NvbmZpcm1BY3Rpb24oKSxcbiAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgICBhY3Rpb246ICgpID0+ICh0aGlzLmlzTGlua0VkaXRpbmcgPyB0aGlzLnRvRWRpdExpbmsoKSA6IHRoaXMudG9JbnNlcnRMaW5rKHRoaXMudXJsTGluaywgdGhpcy51cmxMaW5rVGV4dCkpXG4gIH07XG5cbiAgZ2V0IG1vZGFsVGl0bGUoKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5tb2RhbFR5cGUgPT09ICdpbWFnZScpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpdGVyYWxzLmluc2VydEltYWdlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxpbmtDb25maXJtQWN0aW9uKCk7XG4gIH1cblxuICBnZXQgaXNVcGxvYWRWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy51cGxvYWRNb2RlbCAmJiB0aGlzLnVwbG9hZE1vZGVsLmxlbmd0aCk7XG4gIH1cblxuICBnZXQgaXNVcmxWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnVybEltYWdlICYmIHRoaXMubW9kYWxJbWFnZUZvcm0gJiYgdGhpcy5tb2RhbEltYWdlRm9ybS52YWxpZDtcbiAgfVxuXG4gIGdldCBtb2RhbFByaW1hcnlBY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxUeXBlID09PSAnaW1hZ2UnID8gdGhpcy5tb2RhbENvbmZpcm1BY3Rpb24gOiB0aGlzLm1vZGFsTGlua0NvbmZpcm1BY3Rpb247XG4gIH1cblxuICBAVmlld0NoaWxkKCdtb2RhbCcsIHsgc3RhdGljOiB0cnVlIH0pIG1vZGFsOiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsSW1hZ2VGb3JtJykgbW9kYWxJbWFnZUZvcm06IE5nRm9ybTtcblxuICBAVmlld0NoaWxkKCd1cGxvYWQnLCB7IHN0YXRpYzogdHJ1ZSB9KSB1cGxvYWQ6IFBvVXBsb2FkQ29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsSW1hZ2UnLCB7IHN0YXRpYzogdHJ1ZSB9KSBtb2RhbEltYWdlOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsTGluaycsIHsgc3RhdGljOiB0cnVlIH0pIG1vZGFsTGluazogUG9Nb2RhbENvbXBvbmVudDtcblxuICBAVmlld0NoaWxkKCdtb2RhbExpbmtGb3JtJykgbW9kYWxMaW5rRm9ybTogTmdGb3JtO1xuXG4gIEBPdXRwdXQoJ3AtY29tbWFuZCcpIGNvbW1hbmQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IHsgY29tbWFuZDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIHwgYW55IH0+KCk7XG5cbiAgQE91dHB1dCgncC1saW5rLWVkaXRpbmcnKSBsaW5rRWRpdGluZyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge31cblxuICBhc3luYyBjb252ZXJ0VG9CYXNlNjQoKSB7XG4gICAgaWYgKHRoaXMuaXNVcGxvYWRWYWxpZCkge1xuICAgICAgY29uc3QgdXBsb2FkSW1hZ2UgPSB0aGlzLnVwbG9hZE1vZGVsWzBdLnJhd0ZpbGU7XG4gICAgICByZXR1cm4gYXdhaXQgY29udmVydEltYWdlVG9CYXNlNjQodXBsb2FkSW1hZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGxpbmtDb25maXJtQWN0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaXNMaW5rRWRpdGluZyA/IHRoaXMubGl0ZXJhbHMuZWRpdExpbmsgOiB0aGlzLmxpdGVyYWxzLmluc2VydExpbms7XG4gIH1cblxuICBlbWl0Q29tbWFuZCh2YWx1ZSkge1xuICAgIGxldCBjb21tYW5kOiBzdHJpbmc7XG4gICAgaWYgKHZhbHVlICYmIHRoaXMubW9kYWxUeXBlID09PSBQb1JpY2hUZXh0TW9kYWxUeXBlLkltYWdlKSB7XG4gICAgICBjb21tYW5kID0gJ2luc2VydEltYWdlJztcbiAgICAgIHRoaXMuY29tbWFuZC5lbWl0KHsgY29tbWFuZCwgdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgZm9ybU1vZGVsVmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLm1vZGFsTGlua0NvbmZpcm1BY3Rpb24uZGlzYWJsZWQgPSB0aGlzLm1vZGFsTGlua0Zvcm0gJiYgdGhpcy5tb2RhbExpbmtGb3JtLmludmFsaWQpO1xuICB9XG5cbiAgYXN5bmMgaW5zZXJ0RWxlbWVudFJlZigpIHtcbiAgICBsZXQgdXBsb2FkSW1hZ2U6IHN0cmluZztcblxuICAgIGlmICh0aGlzLm1vZGFsVHlwZSA9PT0gUG9SaWNoVGV4dE1vZGFsVHlwZS5JbWFnZSAmJiAhdGhpcy51cmxJbWFnZSkge1xuICAgICAgdXBsb2FkSW1hZ2UgPSBhd2FpdCB0aGlzLmNvbnZlcnRUb0Jhc2U2NCgpO1xuICAgIH1cblxuICAgIHRoaXMucmV0cmlldmVDdXJzb3JQb3NpdGlvbigpO1xuICAgIHRoaXMubW9kYWwuY2xvc2UoKTtcblxuICAgIGlmICh0aGlzLmlzVXJsVmFsaWQgfHwgdGhpcy5pc1VwbG9hZFZhbGlkKSB7XG4gICAgICB0aGlzLmVtaXRDb21tYW5kKHRoaXMudXJsSW1hZ2UgfHwgdXBsb2FkSW1hZ2UpO1xuICAgIH1cbiAgICB0aGlzLmNsZWFuVXBGaWVsZHMoKTtcbiAgfVxuXG4gIG9wZW5Nb2RhbCh0eXBlOiBQb1JpY2hUZXh0TW9kYWxUeXBlKSB7XG4gICAgdGhpcy5tb2RhbFR5cGUgPSB0eXBlO1xuXG4gICAgdGhpcy5zYXZlQ3Vyc29yUG9zaXRpb24oKTtcblxuICAgIGlmICh0aGlzLm1vZGFsVHlwZSA9PT0gUG9SaWNoVGV4dE1vZGFsVHlwZS5MaW5rKSB7XG4gICAgICB0aGlzLnByZXBhcmVNb2RhbEZvckxpbmsoKTtcbiAgICAgIHRoaXMubW9kYWxMaW5rQ29uZmlybUFjdGlvbi5sYWJlbCA9IHRoaXMubGlua0NvbmZpcm1BY3Rpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vZGFsLm9wZW4oKTtcbiAgfVxuXG4gIHNlbGVjdGVkTGluayhldmVudCkge1xuICAgIHRoaXMuaXNTZWxlY3RlZExpbmsgPSAhIWV2ZW50O1xuICAgIHRoaXMubGlua0VsZW1lbnQgPSBldmVudDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tJZklzRW1wdHkodXJsTGluazogc3RyaW5nLCB1cmxMaW5rVGV4dDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHVybExpbmtUZXh0ID09PSB1bmRlZmluZWQgfHwgdXJsTGlua1RleHQudHJpbSgpID09PSAnJyA/IHVybExpbmsgOiB1cmxMaW5rVGV4dDtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW5VcEZpZWxkcygpIHtcbiAgICB0aGlzLnVybEltYWdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudXJsTGluayA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnVybExpbmtUZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudXBsb2FkTW9kZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0xpbmtFZGl0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc1NlbGVjdGVkTGluayA9IGZhbHNlO1xuICAgIHRoaXMubGlua0VsZW1lbnQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGZvcm1SZXNldChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcbiAgICBjb250cm9sLm1hcmtBc1ByaXN0aW5lKCk7XG4gICAgY29udHJvbC5tYXJrQXNVbnRvdWNoZWQoKTtcbiAgICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgfVxuXG4gIHByaXZhdGUgcHJlcGFyZU1vZGFsRm9yTGluaygpIHtcbiAgICB0aGlzLnNhdmVTZWxlY3Rpb25UZXh0KCk7XG4gICAgaWYgKHRoaXMubW9kYWxMaW5rRm9ybSkge1xuICAgICAgdGhpcy5mb3JtUmVzZXQodGhpcy5tb2RhbExpbmtGb3JtLmNvbnRyb2wpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5mb3JtTW9kZWxWYWxpZGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuaXNTZWxlY3RlZExpbmspIHtcbiAgICAgIHRoaXMuaXNMaW5rRWRpdGluZyA9IHRydWU7XG4gICAgICB0aGlzLnNldExpbmtFZGl0YWJsZUZvck1vZGFsKCk7XG4gICAgfVxuXG4gICAgdGhpcy5saW5rRWRpdGluZy5lbWl0KHRoaXMuaXNMaW5rRWRpdGluZyk7XG4gIH1cblxuICBwcml2YXRlIHJlc3RvcmVTZWxlY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuc2F2ZWRTZWxlY3Rpb24pIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uYWRkUmFuZ2UodGhpcy5zYXZlZFNlbGVjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmV0cmlldmVDdXJzb3JQb3NpdGlvbigpIHtcbiAgICB0aGlzLnNlbGVjdGlvbi5jb2xsYXBzZSh0aGlzLnNhdmVkQ3Vyc29yUG9zaXRpb25bMF0sIHRoaXMuc2F2ZWRDdXJzb3JQb3NpdGlvblsxXSk7XG4gIH1cblxuICBwcml2YXRlIHNhdmVDdXJzb3JQb3NpdGlvbigpIHtcbiAgICB0aGlzLnNhdmVkQ3Vyc29yUG9zaXRpb24gPSBbdGhpcy5zZWxlY3Rpb24uZm9jdXNOb2RlLCB0aGlzLnNlbGVjdGlvbi5mb2N1c09mZnNldF07XG4gIH1cblxuICBwcml2YXRlIHNhdmVTZWxlY3Rpb25UZXh0KCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvbi5hbmNob3JOb2RlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnNhdmVkU2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICAgIHRoaXMudXJsTGlua1RleHQgPSB0aGlzLnNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldExpbmtFZGl0YWJsZUZvck1vZGFsKCkge1xuICAgIHRoaXMudXJsTGlua1RleHQgPSB0aGlzLmxpbmtFbGVtZW50LmlubmVyVGV4dDtcbiAgICB0aGlzLnVybExpbmsgPSB0aGlzLmxpbmtFbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b0VkaXRMaW5rKCkge1xuICAgIGlmIChpc0lFKCkpIHtcbiAgICAgIHRoaXMubGlua0VsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmxpbmtFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5saW5rRWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnRvSW5zZXJ0TGluayh0aGlzLnVybExpbmssIHRoaXMudXJsTGlua1RleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b0luc2VydExpbmsodXJsTGluaywgdXJsTGlua1RleHQpIHtcbiAgICB0aGlzLm1vZGFsLmNsb3NlKCk7XG4gICAgdGhpcy5yZXN0b3JlU2VsZWN0aW9uKCk7XG5cbiAgICBjb25zdCB1cmxMaW5rVGV4dFZhbHVlID0gdGhpcy5jaGVja0lmSXNFbXB0eSh1cmxMaW5rLCB1cmxMaW5rVGV4dCk7XG4gICAgY29uc3QgdXJsQXNFeHRlcm5hbExpbmsgPSBpc0V4dGVybmFsTGluayh1cmxMaW5rKSA/IHVybExpbmsgOiBgaHR0cDovLyR7dXJsTGlua31gO1xuXG4gICAgY29uc3QgY29tbWFuZDogc3RyaW5nID0gJ0luc2VydEhUTUwnO1xuXG4gICAgY29uc3QgdmFsdWUgPSB7IHVybExpbms6IHVybEFzRXh0ZXJuYWxMaW5rLCB1cmxMaW5rVGV4dDogdXJsTGlua1RleHRWYWx1ZSB9O1xuXG4gICAgdGhpcy5jb21tYW5kLmVtaXQoeyBjb21tYW5kLCB2YWx1ZSB9KTtcblxuICAgIHRoaXMuY2xlYW5VcEZpZWxkcygpO1xuICB9XG59XG4iXX0=
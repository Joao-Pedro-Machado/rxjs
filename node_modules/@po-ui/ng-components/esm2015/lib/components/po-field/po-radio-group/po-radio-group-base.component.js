import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
const poRadioGroupColumnsDefaultLength = 6;
const poRadioGroupColumnsTotalLength = 12;
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 */
export class PoRadioGroupBaseComponent {
    constructor() {
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Evento ao alterar valor do campo. */
        this.change = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value) {
        const columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value) {
        this._options = value;
        removeDuplicatedOptions(this.options);
    }
    get options() {
        return this._options;
    }
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    changeValue(changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    }
    registerOnChange(fn) {
        this.onChangePropagate = fn;
    }
    registerOnTouched(fn) { }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        const element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    }
    checkColumnsRange(columns, maxColumns) {
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    getGridSystemColumns(columns, maxColumns) {
        const gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoRadioGroupBaseComponent.decorators = [
    { type: Directive }
];
PoRadioGroupBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    name: [{ type: Input, args: ['name',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    required: [{ type: Input, args: ['p-required',] }],
    options: [{ type: Input, args: ['p-options',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    change: [{ type: Output, args: ['p-change',] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], PoRadioGroupBaseComponent.prototype, "autoFocus", void 0);
//# sourceMappingURL=data:application/json;base64,
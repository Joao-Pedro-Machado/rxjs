import { ElementRef, EventEmitter, Input, Output, Directive } from '@angular/core';
/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
export class PoCleanBaseComponent {
    constructor() {
        /** Valor que será atribuído ao campo quando for clicado no po-clean. */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return (this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly());
    }
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    hasCleanAttr() {
        return this.parentComponent.clean;
    }
    // Este método verifica se o componente pai está desabilitado.
    isDisabled() {
        return this.parentComponent.disabled;
    }
    // Este método verifica se o componente pai está somente leitura.
    isReadonly() {
        return this.parentComponent.readonly;
    }
}
PoCleanBaseComponent.decorators = [
    { type: Directive }
];
PoCleanBaseComponent.propDecorators = {
    inputRef: [{ type: Input, args: ['p-element-ref',] }],
    defaultValue: [{ type: Input, args: ['p-default-value',] }],
    changeEvent: [{ type: Output, args: ['p-change-event',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY2xlYW4vcG8tY2xlYW4tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkY7Ozs7Ozs7R0FPRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBRDFDO1FBS0Usd0VBQXdFO1FBQzlDLGlCQUFZLEdBQVksRUFBRSxDQUFDO1FBRXJEOzs7O1dBSUc7UUFDdUIsZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQWtDdEYsQ0FBQztJQTlCQyxLQUFLO1FBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxDQUNMLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FDOUcsQ0FBQztJQUNKLENBQUM7SUFFRCwwRkFBMEY7SUFDMUYseUNBQXlDO0lBQ2pDLFlBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQsOERBQThEO0lBQ3RELFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQsaUVBQWlFO0lBQ3pELFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDOzs7WUExQ0YsU0FBUzs7O3VCQUdQLEtBQUssU0FBQyxlQUFlOzJCQUdyQixLQUFLLFNBQUMsaUJBQWlCOzBCQU92QixNQUFNLFNBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgw6kgZGUgdXNvIGludGVybm8gdXRpbGl6YWRvIHBvciBjb21wb25lbnRlcyBkZSBlbnRyYWRhIGRlIGRhZG9zIGNvbSBvIG9iamV0aXZvIGRlIHJlc2V0YXIgYXMgaW5mb3JtYcOnw7VlcyBkbyBtb2RlbC5cbiAqXG4gKiBQb3IgcGFkcsOjbyBsaW1wYSBvIHZhbG9yIGRvIGNhbXBvIGUgZXhlY3V0YSBvIG3DqXRvZG8gb25DaGFuZ2VQcm9wYWdhdGUsIGNhc28gdGVuaGEgYSBuZWNlc3NpZGFkZSBkZSB0cmF0YXIgYSBmdW7Dp8OjbyBkZSBsaW1wYXIgbyBjYW1wbyxcbiAqIGRldmUgaW1wbGVtZW50YXIgYSBpbnRlcmZhY2UgUG9DbGVhbi5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DbGVhbkJhc2VDb21wb25lbnQge1xuICAvKiogTmVzdGEgcHJvcHJpZWRhZGUgZGV2ZS1zZSBpbmZvcm1hciBvIGVsZW1lbnRSZWYgZG8gY2FtcG8gZGUgZW50cmFkYSBxdWUgdXRpbGl6YXLDoSBvIHBvLWNsZWFuLiAqL1xuICBASW5wdXQoJ3AtZWxlbWVudC1yZWYnKSBpbnB1dFJlZjogRWxlbWVudFJlZjtcblxuICAvKiogVmFsb3IgcXVlIHNlcsOhIGF0cmlidcOtZG8gYW8gY2FtcG8gcXVhbmRvIGZvciBjbGljYWRvIG5vIHBvLWNsZWFuLiAqL1xuICBASW5wdXQoJ3AtZGVmYXVsdC12YWx1ZScpIGRlZmF1bHRWYWx1ZT86IHN0cmluZyA9ICcnO1xuXG4gIC8qKlxuICAgKiBFdmVudG8gZGlzcGFyYWRvIHF1YW5kbyBleGVjdXRhZGEgYcOnw6NvIGRvIHBvLWNsZWFuLlxuICAgKiBFc3RlIGV2ZW50byBkZXZlIHNlciB1c2FkbyBwYXJhIGF2aXNhciBwYXJhIG8gY29tcG9uZW50ZSBxdWUgZXN0w6EgdXNhbmRvIG8gcG8tY2xlYW4sIHF1ZSBvIGJvdMOjbyBmb2kgZGlzcGFyYWRvLFxuICAgKiBlIHByb3ZhdmVsbWVudGUgc2Vyw6EgcHJlY2lzbyBlbWl0aXIgbyBldmVudG8gcGFyYSBhdHVhbGl6YXIgbyBtb2RlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlLWV2ZW50JykgY2hhbmdlRXZlbnQ/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByb3RlY3RlZCBwYXJlbnRDb21wb25lbnQ6IGFueTtcblxuICBjbGVhcigpIHtcbiAgICB0aGlzLnNldElucHV0VmFsdWUodGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgIHRoaXMuY2hhbmdlRXZlbnQuZW1pdCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBzaG93SWNvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgIT09IHRoaXMuZ2V0SW5wdXRWYWx1ZSgpICYmIHRoaXMuaGFzQ2xlYW5BdHRyKCkgJiYgIXRoaXMuaXNEaXNhYmxlZCgpICYmICF0aGlzLmlzUmVhZG9ubHkoKVxuICAgICk7XG4gIH1cblxuICAvLyBFc3RlIG3DqXRvZG8gdmVyaWZpY2Egc2UgbyBjb21wb25lbnRlIHBhaSBwb3NzdWkgYSBwcm9wcmllZGFkZSBjbGVhbiBkaWZlcmVudGUgZGUgdmF6aW8sXG4gIC8vIG91IHNlamEsIHNlIG8gcG8tY2xlYW4gZGV2ZSBzZXIgdXNhZG8uXG4gIHByaXZhdGUgaGFzQ2xlYW5BdHRyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5jbGVhbjtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIGVzdMOhIGRlc2FiaWxpdGFkby5cbiAgcHJpdmF0ZSBpc0Rpc2FibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5kaXNhYmxlZDtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIGVzdMOhIHNvbWVudGUgbGVpdHVyYS5cbiAgcHJpdmF0ZSBpc1JlYWRvbmx5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmVudENvbXBvbmVudC5yZWFkb25seTtcbiAgfVxuXG4gIGFic3RyYWN0IHNldElucHV0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgYWJzdHJhY3QgZ2V0SW5wdXRWYWx1ZSgpOiBzdHJpbmc7XG59XG4iXX0=
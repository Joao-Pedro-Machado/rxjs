import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por manipular os botões de aba.
 */
export class PoTabButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    // Ativa o botão
    set active(value) {
        this._active = value;
        this.emitActivated();
    }
    get active() {
        return this._active;
    }
    // Oculta o botão
    set hide(value) {
        this._hide = convertToBoolean(value);
        this.setDisplayOnHide();
    }
    get hide() {
        return this._hide;
    }
    ngOnChanges(changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    }
    onClick() {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    }
    emitActivated() {
        if (this.active) {
            this.activated.emit(this);
        }
    }
    setDisplayOnHide() {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    }
}
PoTabButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tab-button',
                template: "<div\n  class=\"po-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  [class.po-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\"\n>\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{ label }}\n  </span>\n</div>\n"
            },] }
];
PoTabButtonComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoTabButtonComponent.propDecorators = {
    active: [{ type: Input, args: ['p-active',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    hide: [{ type: Input, args: ['p-hide',] }],
    id: [{ type: Input, args: ['p-id',] }],
    label: [{ type: Input, args: ['p-label',] }],
    small: [{ type: Input, args: ['p-small',] }],
    activated: [{ type: Output, args: ['p-activated',] }],
    changeState: [{ type: Output, args: ['p-change-state',] }],
    click: [{ type: Output, args: ['p-click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFiLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tdGFicy9wby10YWItYnV0dG9uL3BvLXRhYi1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU3RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RDs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8sb0JBQW9CO0lBK0MvQixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBVDFDLGlEQUFpRDtRQUMxQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV0RCxtRUFBbUU7UUFDekMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNELHFFQUFxRTtRQUNsRCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVELENBQUM7SUEzQzlDLGdCQUFnQjtJQUNoQixJQUF1QixNQUFNLENBQUMsS0FBYztRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUVyQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBS0QsaUJBQWlCO0lBQ2pCLElBQXFCLElBQUksQ0FBQyxLQUFjO1FBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBc0JELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3RHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8sYUFBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RSxDQUFDOzs7WUF6RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixtWEFBNkM7YUFDOUM7OztZQWRtQixVQUFVOzs7cUJBb0IzQixLQUFLLFNBQUMsVUFBVTt1QkFXaEIsS0FBSyxTQUFDLFlBQVk7bUJBR2xCLEtBQUssU0FBQyxRQUFRO2lCQVdkLEtBQUssU0FBQyxNQUFNO29CQUdaLEtBQUssU0FBQyxTQUFTO29CQUdmLEtBQUssU0FBQyxTQUFTO3dCQUdmLE1BQU0sU0FBQyxhQUFhOzBCQUdwQixNQUFNLFNBQUMsZ0JBQWdCO29CQUd2QixNQUFNLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBtYW5pcHVsYXIgb3MgYm90w7VlcyBkZSBhYmEuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRhYi1idXR0b24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFiLWJ1dHRvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBwcml2YXRlIF9hY3RpdmU6IGJvb2xlYW47XG4gIHByaXZhdGUgX2hpZGU6IGJvb2xlYW47XG5cbiAgLy8gQXRpdmEgbyBib3TDo29cbiAgQElucHV0KCdwLWFjdGl2ZScpIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcblxuICAgIHRoaXMuZW1pdEFjdGl2YXRlZCgpO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgLy8gRGVzYWJpbGl0YSBvIGJvdMOjb1xuICBASW5wdXQoJ3AtZGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvLyBPY3VsdGEgbyBib3TDo29cbiAgQElucHV0KCdwLWhpZGUnKSBzZXQgaGlkZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGUgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uSGlkZSgpO1xuICB9XG5cbiAgZ2V0IGhpZGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGU7XG4gIH1cblxuICAvLyBJZGVudGlmaWNhZG9yIGRvIGNvbXBvbmVudGVcbiAgQElucHV0KCdwLWlkJykgaWQ6IHN0cmluZztcblxuICAvLyBSw7N0dWxvIGRvIGJvdMOjb1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIERpbWludWkgbyB0YW1hbmhvIGRvIGJvdMOjb1xuICBASW5wdXQoJ3Atc21hbGwnKSBzbWFsbDogYm9vbGVhbjtcblxuICAvLyBGdW7Dp8OjbyBzZXJhIGVtaXRpZGEgcXVhbmRvIGEgdGFiIGZpY2FyIGF0aXZhZGFcbiAgQE91dHB1dCgncC1hY3RpdmF0ZWQnKSBhY3RpdmF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gRnVuw6fDo28gc2VyYSBlbWl0aWRhIHF1YW5kbyBhIHRhYiBmaWNhciBkZXNhYmlsaXRhZGEgb3UgZXNjb25kaWRhXG4gIEBPdXRwdXQoJ3AtY2hhbmdlLXN0YXRlJykgY2hhbmdlU3RhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLy8gTcOpdG9kbyByZWNlYmlkbyBkbyB1c3XDoXJpbyBwYXJhIHNlciBkaXNwYXJhZG8gcXVhbmRvIGNsaWNhciBuYSBhYmFcbiAgQE91dHB1dCgncC1jbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKChjaGFuZ2VzLmhpZGUgJiYgY2hhbmdlcy5oaWRlLmN1cnJlbnRWYWx1ZSkgfHwgKGNoYW5nZXMuZGlzYWJsZWQgJiYgY2hhbmdlcy5kaXNhYmxlZC5jdXJyZW50VmFsdWUpKSB7XG4gICAgICB0aGlzLmNoYW5nZVN0YXRlLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgb25DbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2xpY2suZW1pdCh0aGlzLmlkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVtaXRBY3RpdmF0ZWQoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlZC5lbWl0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RGlzcGxheU9uSGlkZSgpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gdGhpcy5oaWRlID8gJ25vbmUnIDogJyc7XG4gIH1cbn1cbiJdfQ==
import { ChangeDetectorRef, Component, ContentChildren, QueryList, ViewChild } from '@angular/core';
import { isMobile } from './../../utils/util';
import { PoTabComponent } from './po-tab/po-tab.component';
import { PoTabDropdownComponent } from './po-tab-dropdown/po-tab-dropdown.component';
import { PoTabsBaseComponent } from './po-tabs-base.component';
const poTabsMaxNumberOfTabs = 5;
/**
 * @docsExtends PoTabsBaseComponent
 *
 * @example
 *
 * <example name="po-tabs-basic" title="PO Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="PO Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="PO Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="PO Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
export class PoTabsComponent extends PoTabsBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
        this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
    }
    get isMobileDevice() {
        return isMobile();
    }
    get isShowTabDropdown() {
        return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
    }
    // tabs que serão apresentadas na aba "Mais"
    get overflowedTabs() {
        return this.visibleTabs.filter((_tab, index) => index > this.maxNumberOfTabs - 2);
    }
    get visibleTabs() {
        return this.tabs.filter(tab => !tab.hide);
    }
    closePopover() {
        const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    }
    isVisibleTab(tab) {
        if (this.isMobileDevice) {
            return true;
        }
        const visibleTabIndex = this.visibleTabs.findIndex(visibleTab => visibleTab.id === tab.id);
        return this.visibleTabs.length <= this.maxNumberOfTabs || visibleTabIndex < this.maxNumberOfTabs - 1;
    }
    // Função disparada quando alguma tab ficar ativa
    onTabActive(tab) {
        this.previousActiveTab = this.tabs.find(tabChild => tabChild.active && tabChild.id !== tab.id);
        this.deactivateTab();
    }
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    onTabChangeState(tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    }
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    selectedTab(tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    }
    trackByFn(_i, tab) {
        return tab.id;
    }
    // ativa a previousActiveTab ou primeira tab encontrada.
    activeDistinctTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    }
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    activeFirstTab() {
        this.tabs.some(tabChild => {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    }
    // desativa previousActiveTab e dispara a detecção de mudança.
    deactivateTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    }
}
PoTabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tabs',
                template: "<div class=\"po-tabs-container\" [class.po-tabs-container-mobile]=\"isMobileDevice\">\n  <div class=\"po-tabs-header\">\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n      <po-tab-button\n        *ngIf=\"isVisibleTab(tab)\"\n        class=\"po-tab-button\"\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\n        [p-active]=\"tab.active\"\n        [p-disabled]=\"tab.disabled\"\n        [p-hide]=\"tab.hide\"\n        [p-id]=\"tab.id\"\n        [p-label]=\"tab.label\"\n        [p-small]=\"small\"\n        (keyup.enter)=\"closePopover()\"\n        (p-activated)=\"onTabActive(tab)\"\n        (p-change-state)=\"onTabChangeState(tab)\"\n        (p-click)=\"selectedTab(tab)\"\n      >\n      </po-tab-button>\n    </ng-container>\n\n    <po-tab-dropdown\n      #tabDropdown\n      *ngIf=\"isShowTabDropdown\"\n      class=\"po-tab-button po-tab-dropdown\"\n      p-label=\"Mais\"\n      [p-small]=\"small\"\n      [p-tabs]=\"overflowedTabs\"\n      (p-activated)=\"onTabActive($event)\"\n      (p-change-state)=\"onTabChangeState($event)\"\n      (p-click)=\"selectedTab($event)\"\n    >\n    </po-tab-dropdown>\n  </div>\n</div>\n\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n"
            },] }
];
PoTabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoTabsComponent.propDecorators = {
    tabs: [{ type: ContentChildren, args: [PoTabComponent,] }],
    tabDropdown: [{ type: ViewChild, args: ['tabDropdown', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,
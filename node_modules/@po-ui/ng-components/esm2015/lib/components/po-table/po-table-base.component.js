import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, poLocaleDefault } from '../../utils/util';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoTableColumnSortType } from './enums/po-table-column-sort-type.enum';
import { InputBoolean } from '../../decorators';
export const poTableContainer = ['border', 'shadow'];
export const poTableContainerDefault = 'border';
export const poTableLiteralsDefault = {
    en: {
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    },
    es: {
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    },
    pt: {
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    },
    ru: {
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)
 * e [`p-table-cell-template`](/documentation/po-table-cell-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
export class PoTableBaseComponent {
    constructor(poDate) {
        this.poDate = poDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        this._columnManager = true;
        this.hasMainColumns = false;
        this.mainColumns = [];
        this.selectAll = false;
        this.sortedColumn = { property: null, ascending: true };
        this.subtitleColumns = [];
        /**
         * @optional
         *
         * @description
         *
         * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
         *
         * @default `false`
         */
        this.hideColumnsManager = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite que seja adicionado o estado de carregamento no botão "Carregar mais resultados".
         *
         * @default `false`
         */
        this.loadingShowMore = false;
        /** Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas. */
        this.allSelected = new EventEmitter();
        /** Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas. */
        this.allUnselected = new EventEmitter();
        /**
         * Evento executado ao colapsar uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * Evento executado ao expandir uma linha do `po-table`.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /** Evento executado ao selecionar uma linha do `po-table`. */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * Evento executado ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /** Evento executado ao desmarcar a seleção de uma linha do `po-table`. */
        this.unselected = new EventEmitter();
    }
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems) {
            this.selectAll = false;
        }
        else if (!this.hasColumns) {
            this.columns = this.getDefaultColumns(items[0]);
        }
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns) {
        this._columns = columns || [];
        if (this._columns.length) {
            this.setColumnLink();
            this.calculateWidthHeaders();
        }
        else if (this.hasItems) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
        this.onChangeColumns();
    }
    get columns() {
        return this._columns;
    }
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value) {
        this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
    }
    get container() {
        return this._container;
    }
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
     */
    set hideTextOverflow(hideTextOverflow) {
        this._hideTextOverflow = convertToBoolean(hideTextOverflow);
    }
    get hideTextOverflow() {
        return this._hideTextOverflow;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     */
    set height(height) {
        this._height = height;
        this.calculateWidthHeaders();
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
        this.calculateWidthHeaders();
    }
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poTableLiteralsDefault[poLocaleDefault]), poTableLiteralsDefault[browserLanguage()]), value);
        }
        else {
            this._literals = poTableLiteralsDefault[browserLanguage()];
        }
    }
    get literals() {
        return this._literals || poTableLiteralsDefault[browserLanguage()];
    }
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia a interação do usuário com os dados da _table_.
     *
     * @default `false`
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
        this.calculateWidthHeaders();
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions) {
        this._actions = actions;
        this.calculateWidthHeaders();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value) {
        this._selectable = value === '' ? true : convertToBoolean(value);
        this.calculateWidthHeaders();
    }
    get selectable() {
        return this._selectable;
    }
    set setSort(sort) {
        this.sort = sort === '' ? false : convertToBoolean(sort);
    }
    set setShowMoreDisabled(showMoreDisabled) {
        this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
    }
    set setStriped(striped) {
        this.striped = striped === '' ? false : convertToBoolean(striped);
    }
    set setHideSelectAll(hideSelectAll) {
        this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
    }
    set setSingleSelect(value) {
        this.singleSelect = value === '' ? true : convertToBoolean(value);
    }
    get hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    get nameColumnDetail() {
        return this.columnMasterDetail ? this.columnMasterDetail.property : null;
    }
    get validColumns() {
        const typesValid = [
            'string',
            'number',
            'boolean',
            'date',
            'time',
            'dateTime',
            'currency',
            'subtitle',
            'link',
            'label',
            'icon',
            'cellTemplate',
            'columnTemplate'
        ];
        return this.columns.filter(col => !col.type || typesValid.includes(col.type));
    }
    get sortType() {
        return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
    }
    ngOnChanges(changes) {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
        if (changes.height) {
            this.calculateHeightTableContainer(this.height);
        }
    }
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex) {
        this.setShowDetail(rowIndex, false);
    }
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex) {
        this.setShowDetail(rowIndex, true);
    }
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows() {
        return this.items.filter(item => item.$selected);
    }
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows() {
        return this.items.filter(item => !item.$selected);
    }
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    }
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    }
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    getClassColor(row, column) {
        return column.color ? `po-text-${this.getColumnColor(row, column)}` : '';
    }
    toggleDetail(row) {
        this.setShowDetail(row, !row.$showDetail);
        this.emitExpandEvents(row);
    }
    toggleRowAction(row) {
        const toggleShowAction = row.$showAction;
        this.items.forEach(item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        });
        row.$showAction = !toggleShowAction;
    }
    sortColumn(column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column, type: this.sortType });
        this.sortedColumn.property = column;
    }
    onShowMore() {
        const sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        this.showMore.emit(sort);
    }
    getDefaultColumns(item) {
        const keys = Object.keys(item);
        return keys
            .filter(key => typeof item[key] !== 'object')
            .map(key => {
            return { label: capitalizeFirstLetter(key), property: key };
        });
    }
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    emitExpandEvents(row) {
        row.$showDetail ? this.expanded.emit(row) : this.collapsed.emit(row);
    }
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    getColumnColor(row, column) {
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    getColumnMasterDetail() {
        return this.columns.find(col => col.type === 'detail');
    }
    // Colunas que são inseridas no <head> da tabela
    getMainColumns() {
        return this.validColumns.filter(col => col.visible !== false);
    }
    // Retorna as colunas com status
    getSubtitleColumns() {
        return this.columns.filter(col => col.type === 'subtitle');
    }
    isEverySelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    onChangeColumns() {
        this.setMainColumns();
        this.setColumnMasterDetail();
        this.setSubtitleColumns();
    }
    setColumnLink() {
        this.columns.forEach(column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        });
    }
    setColumnMasterDetail() {
        this.columnMasterDetail = this.getColumnMasterDetail();
    }
    setMainColumns() {
        this.mainColumns = this.getMainColumns();
        this.hasMainColumns = !!this.mainColumns.length;
        this.allColumnsWidthPixels = this.verifyWidthColumnsPixels();
    }
    setShowDetail(rowIdentifier, isShowDetail) {
        const isRowIndex = typeof rowIdentifier === 'number' && this.items[rowIdentifier];
        const row = isRowIndex ? this.items[rowIdentifier] : rowIdentifier;
        row.$showDetail = isShowDetail;
    }
    setSubtitleColumns() {
        this.subtitleColumns = this.getSubtitleColumns();
    }
    sortArray(column, ascending) {
        this.items.sort((leftSide, rightSide) => {
            if (column.type === 'date' || column.type === 'dateTime') {
                return this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        });
    }
    unselectOtherRows(rows, row) {
        rows.forEach(item => {
            if (item !== row) {
                item.$selected = false;
            }
        });
    }
    verifyWidthColumnsPixels() {
        return this.hasMainColumns ? this.mainColumns.every(column => column.width && column.width.includes('px')) : false;
    }
}
PoTableBaseComponent.decorators = [
    { type: Directive }
];
PoTableBaseComponent.ctorParameters = () => [
    { type: PoDateService }
];
PoTableBaseComponent.propDecorators = {
    items: [{ type: Input, args: ['p-items',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    container: [{ type: Input, args: ['p-container',] }],
    hideTextOverflow: [{ type: Input, args: ['p-hide-text-overflow',] }],
    height: [{ type: Input, args: ['p-height',] }],
    hideDetail: [{ type: Input, args: ['p-hide-detail',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    loading: [{ type: Input, args: ['p-loading',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    selectable: [{ type: Input, args: ['p-selectable',] }],
    hideColumnsManager: [{ type: Input, args: ['p-hide-columns-manager',] }],
    loadingShowMore: [{ type: Input, args: ['p-loading-show-more',] }],
    setSort: [{ type: Input, args: ['p-sort',] }],
    setShowMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
    setStriped: [{ type: Input, args: ['p-striped',] }],
    setHideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    setSingleSelect: [{ type: Input, args: ['p-single-select',] }],
    maxColumns: [{ type: Input, args: ['p-max-columns',] }],
    allSelected: [{ type: Output, args: ['p-all-selected',] }],
    allUnselected: [{ type: Output, args: ['p-all-unselected',] }],
    collapsed: [{ type: Output, args: ['p-collapsed',] }],
    expanded: [{ type: Output, args: ['p-expanded',] }],
    selected: [{ type: Output, args: ['p-selected',] }],
    showMore: [{ type: Output, args: ['p-show-more',] }],
    sortBy: [{ type: Output, args: ['p-sort-by',] }],
    unselected: [{ type: Output, args: ['p-unselected',] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], PoTableBaseComponent.prototype, "hideColumnsManager", void 0);
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], PoTableBaseComponent.prototype, "loadingShowMore", void 0);
//# sourceMappingURL=data:application/json;base64,
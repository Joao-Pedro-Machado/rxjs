import { Component, EventEmitter, ViewChild } from '@angular/core';
import { getShortBrowserLanguage } from '../../../utils/util';
import { PoModalComponent } from '../../../components/po-modal/po-modal.component';
import { poHttpInterceptorDetailLiteralsDefault } from './po-http-interceptor-detail-literals.interface';
export const colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
export class PoHttpInterceptorDetailComponent {
    constructor() {
        this.closed = new EventEmitter();
        this.details = [];
        this.language = getShortBrowserLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
        this.primaryAction = {
            action: () => this.close(),
            label: this.literals.closeButton
        };
    }
    set detail(details) {
        if (details && details.length) {
            this.details = this.filterByValidDetails(details);
        }
        this.title = this.formatTitle(this.details);
    }
    close() {
        this.modal.close();
        this.closed.emit();
    }
    formatDetailItemTitle(detail) {
        return detail.code ? `${detail.code} - ${detail.message}` : detail.message;
    }
    open() {
        this.modal.open();
    }
    typeColor(type) {
        return colors[type];
    }
    typeValue(type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    }
    addValidDetail(newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    }
    getValidDetailProperties({ code, message, detailedMessage, type }) {
        return { code, message, detailedMessage, type };
    }
    filterByValidDetails(details) {
        return details.reduce((newDetails, detail) => this.addValidDetail(newDetails, detail), []);
    }
    formatTitle(details) {
        return details.length > 1 ? `${this.literals.details} (${details.length})` : this.literals.detail;
    }
}
PoHttpInterceptorDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-http-interceptor-detail',
                template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n          <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n        </div>\n\n        <div class=\"po-row\">\n          <p>{{ detail.detailedMessage }}</p>\n        </div>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n"
            },] }
];
PoHttpInterceptorDetailComponent.propDecorators = {
    modal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9pbnRlcmNlcHRvcnMvcG8taHR0cC1pbnRlcmNlcHRvci9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBR25GLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRXpHLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUVoRzs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8sZ0NBQWdDO0lBSjdDO1FBT0UsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDakMsWUFBTyxHQUFtQyxFQUFFLENBQUM7UUFDN0MsYUFBUSxHQUFHLHVCQUF1QixFQUFFLENBQUM7UUFDckMsYUFBUSxHQUFHLHNDQUFzQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqRSxrQkFBYSxHQUFrQjtZQUM3QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMxQixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXO1NBQ2pDLENBQUM7SUFnREosQ0FBQztJQTVDQyxJQUFJLE1BQU0sQ0FBQyxPQUF1QztRQUNoRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQscUJBQXFCLENBQUMsTUFBTTtRQUMxQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDN0UsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNwQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVk7UUFDcEIsT0FBTyxzQ0FBc0MsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDO0lBQzdFLENBQUM7SUFFTyxjQUFjLENBQUMsVUFBMEMsRUFBRSxNQUErQjtRQUNoRyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNoRyxDQUFDO0lBRU8sd0JBQXdCLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQTJCO1FBQ2hHLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRU8sb0JBQW9CLENBQUMsT0FBdUM7UUFDbEUsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVPLFdBQVcsQ0FBQyxPQUF1QztRQUN6RCxPQUFPLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDcEcsQ0FBQzs7O1lBOURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNEJBQTRCO2dCQUN0Qyxtb0JBQTBEO2FBQzNEOzs7b0JBRUUsU0FBUyxTQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2V0U2hvcnRCcm93c2VyTGFuZ3VhZ2UgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvTW9kYWxBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL3BvLW1vZGFsL3BvLW1vZGFsLWFjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Nb2RhbENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tbW9kYWwvcG8tbW9kYWwuY29tcG9uZW50JztcblxuaW1wb3J0IHsgUG9IdHRwSW50ZXJjZXB0b3JEZXRhaWwgfSBmcm9tICcuL3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBwb0h0dHBJbnRlcmNlcHRvckRldGFpbExpdGVyYWxzRGVmYXVsdCB9IGZyb20gJy4vcG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwtbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IHsgc3VjY2VzczogJ2NvbG9yLTExJywgZXJyb3I6ICdjb2xvci0wNycsIHdhcm5pbmc6ICdjb2xvci0wOCcsIGluZm86ICcnIH07XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBwYXJhIGEgbW9kYWwgZGUgZGV0YWxoZXMgZXhpYmlkYSBwZWxvIGludGVyY2VwdG9yXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0h0dHBJbnRlcmNlcHRvckRldGFpbENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoUG9Nb2RhbENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgbW9kYWw6IFBvTW9kYWxDb21wb25lbnQ7XG5cbiAgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGRldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPiA9IFtdO1xuICBsYW5ndWFnZSA9IGdldFNob3J0QnJvd3Nlckxhbmd1YWdlKCk7XG4gIGxpdGVyYWxzID0gcG9IdHRwSW50ZXJjZXB0b3JEZXRhaWxMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG5cbiAgcHJpbWFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHtcbiAgICBhY3Rpb246ICgpID0+IHRoaXMuY2xvc2UoKSxcbiAgICBsYWJlbDogdGhpcy5saXRlcmFscy5jbG9zZUJ1dHRvblxuICB9O1xuXG4gIHRpdGxlOiBzdHJpbmc7XG5cbiAgc2V0IGRldGFpbChkZXRhaWxzOiBBcnJheTxQb0h0dHBJbnRlcmNlcHRvckRldGFpbD4pIHtcbiAgICBpZiAoZGV0YWlscyAmJiBkZXRhaWxzLmxlbmd0aCkge1xuICAgICAgdGhpcy5kZXRhaWxzID0gdGhpcy5maWx0ZXJCeVZhbGlkRGV0YWlscyhkZXRhaWxzKTtcbiAgICB9XG5cbiAgICB0aGlzLnRpdGxlID0gdGhpcy5mb3JtYXRUaXRsZSh0aGlzLmRldGFpbHMpO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5tb2RhbC5jbG9zZSgpO1xuICAgIHRoaXMuY2xvc2VkLmVtaXQoKTtcbiAgfVxuXG4gIGZvcm1hdERldGFpbEl0ZW1UaXRsZShkZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLmNvZGUgPyBgJHtkZXRhaWwuY29kZX0gLSAke2RldGFpbC5tZXNzYWdlfWAgOiBkZXRhaWwubWVzc2FnZTtcbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5tb2RhbC5vcGVuKCk7XG4gIH1cblxuICB0eXBlQ29sb3IodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gY29sb3JzW3R5cGVdO1xuICB9XG5cbiAgdHlwZVZhbHVlKHR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHBvSHR0cEludGVyY2VwdG9yRGV0YWlsTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdW3R5cGVdIHx8IHR5cGU7XG4gIH1cblxuICBwcml2YXRlIGFkZFZhbGlkRGV0YWlsKG5ld0RldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPiwgZGV0YWlsOiBQb0h0dHBJbnRlcmNlcHRvckRldGFpbCkge1xuICAgIHJldHVybiBkZXRhaWwubWVzc2FnZSA/IG5ld0RldGFpbHMuY29uY2F0KHRoaXMuZ2V0VmFsaWREZXRhaWxQcm9wZXJ0aWVzKGRldGFpbCkpIDogbmV3RGV0YWlscztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmFsaWREZXRhaWxQcm9wZXJ0aWVzKHsgY29kZSwgbWVzc2FnZSwgZGV0YWlsZWRNZXNzYWdlLCB0eXBlIH06IFBvSHR0cEludGVyY2VwdG9yRGV0YWlsKSB7XG4gICAgcmV0dXJuIHsgY29kZSwgbWVzc2FnZSwgZGV0YWlsZWRNZXNzYWdlLCB0eXBlIH07XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckJ5VmFsaWREZXRhaWxzKGRldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPikge1xuICAgIHJldHVybiBkZXRhaWxzLnJlZHVjZSgobmV3RGV0YWlscywgZGV0YWlsKSA9PiB0aGlzLmFkZFZhbGlkRGV0YWlsKG5ld0RldGFpbHMsIGRldGFpbCksIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VGl0bGUoZGV0YWlsczogQXJyYXk8UG9IdHRwSW50ZXJjZXB0b3JEZXRhaWw+KSB7XG4gICAgcmV0dXJuIGRldGFpbHMubGVuZ3RoID4gMSA/IGAke3RoaXMubGl0ZXJhbHMuZGV0YWlsc30gKCR7ZGV0YWlscy5sZW5ndGh9KWAgOiB0aGlzLmxpdGVyYWxzLmRldGFpbDtcbiAgfVxufVxuIl19
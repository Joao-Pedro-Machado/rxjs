import { Injectable } from '@angular/core';
import { PoComponentInjectorService } from './../po-component-injector/po-component-injector.service';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-component-injector/po-component-injector.service";
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="PO Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="PO Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="PO Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
export class PoNotificationService extends PoNotificationBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    createToaster(toaster) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === PoToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(() => {
                this.destroyToaster(componentRef);
            }, toaster.duration);
        }
    }
    destroyToaster(toaster) {
        let stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        const index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.poComponentInjector.destroyComponentInApplication(toaster);
        for (let count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    }
    observableOnClose(componentRef) {
        componentRef.instance.observableOnClose.subscribe(() => {
            this.destroyToaster(componentRef);
        });
    }
}
PoNotificationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(i0.ɵɵinject(i1.PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
PoNotificationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PoNotificationService.ctorParameters = () => [
    { type: PoComponentInjectorService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL3NlcnZpY2VzL3BvLW5vdGlmaWNhdGlvbi9wby1ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN0RyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUzRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNoRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBRXZFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBS0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHlCQUF5QjtJQUNsRSxZQUFvQixtQkFBK0M7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFEVSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTRCO0lBRW5FLENBQUM7SUFFRCxhQUFhLENBQUMsT0FBa0I7UUFDOUIsTUFBTSxZQUFZLEdBQXNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWxILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwQyxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxPQUFZO1FBQ3pCLElBQUksS0FBSyxDQUFDO1FBRVYsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsS0FBSyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUU7WUFDN0QsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDdkI7YUFBTTtZQUNMLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQzFCO1FBRUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsbUJBQW1CLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEUsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakQsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU8saUJBQWlCLENBQUMsWUFBaUI7UUFDekMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7O1lBdERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBN0JRLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSB9IGZyb20gJy4vLi4vcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTm90aWZpY2F0aW9uQmFzZVNlcnZpY2UgfSBmcm9tICcuL3BvLW5vdGlmaWNhdGlvbi1iYXNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Ub2FzdGVyIH0gZnJvbSAnLi9wby10b2FzdGVyL3BvLXRvYXN0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVG9hc3Rlck9yaWVudGF0aW9uIH0gZnJvbSAnLi9wby10b2FzdGVyL3BvLXRvYXN0ZXItb3JpZW50YXRpb24uZW51bSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXJDb21wb25lbnQgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBQb05vdGlmaWNhdGlvbkJhc2VTZXJ2aWNlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbm90aWZpY2F0aW9uLWJhc2ljXCIgdGl0bGU9XCJQTyBOb3RpZmljYXRpb24gQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW5vdGlmaWNhdGlvbi1sYWJzXCIgdGl0bGU9XCJQTyBOb3RpZmljYXRpb24gTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzL3NhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1ub3RpZmljYXRpb24tc2FsZXNcIiB0aXRsZT1cIlBPIE5vdGlmaWNhdGlvbiAtIFNhbGVzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tc2FsZXMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tc2FsZXMvc2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvTm90aWZpY2F0aW9uU2VydmljZSBleHRlbmRzIFBvTm90aWZpY2F0aW9uQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGNyZWF0ZVRvYXN0ZXIodG9hc3RlcjogUG9Ub2FzdGVyKTogdm9pZCB7XG4gICAgY29uc3QgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PiA9IHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFBvVG9hc3RlckNvbXBvbmVudCk7XG5cbiAgICB0b2FzdGVyLmNvbXBvbmVudFJlZiA9IGNvbXBvbmVudFJlZjtcblxuICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmNvbmZpZ1RvYXN0ZXIodG9hc3Rlcik7XG5cbiAgICBpZiAodG9hc3Rlci5vcmllbnRhdGlvbiA9PT0gUG9Ub2FzdGVyT3JpZW50YXRpb24uVG9wKSB7XG4gICAgICB0aGlzLnN0YWNrVG9wLnB1c2goY29tcG9uZW50UmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFja0JvdHRvbS5wdXNoKGNvbXBvbmVudFJlZik7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZhYmxlT25DbG9zZShjb21wb25lbnRSZWYpO1xuXG4gICAgaWYgKHRvYXN0ZXIuYWN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRlc3Ryb3lUb2FzdGVyKGNvbXBvbmVudFJlZik7XG4gICAgICB9LCB0b2FzdGVyLmR1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95VG9hc3Rlcih0b2FzdGVyOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgc3RhY2s7XG5cbiAgICBpZiAodG9hc3Rlci5pbnN0YW5jZS5vcmllbnRhdGlvbiA9PT0gUG9Ub2FzdGVyT3JpZW50YXRpb24uVG9wKSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tUb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YWNrID0gdGhpcy5zdGFja0JvdHRvbTtcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHN0YWNrLmluZGV4T2YodG9hc3Rlcik7XG4gICAgc3RhY2suc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5kZXN0cm95Q29tcG9uZW50SW5BcHBsaWNhdGlvbih0b2FzdGVyKTtcblxuICAgIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCBzdGFjay5sZW5ndGg7IGNvdW50KyspIHtcbiAgICAgIHN0YWNrW2NvdW50XS5pbnN0YW5jZS5jaGFuZ2VQb3NpdGlvbihjb3VudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvYnNlcnZhYmxlT25DbG9zZShjb21wb25lbnRSZWY6IGFueSkge1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5vYnNlcnZhYmxlT25DbG9zZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5kZXN0cm95VG9hc3Rlcihjb21wb25lbnRSZWYpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=
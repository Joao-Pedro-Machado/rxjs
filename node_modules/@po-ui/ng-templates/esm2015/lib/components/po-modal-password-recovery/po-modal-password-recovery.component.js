import { Component, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { isExternalLink } from '../../utils/util';
import { PoI18nPipe, PoModalComponent } from '@po-ui/ng-components';
import { PoModalPasswordRecoveryBaseComponent } from './po-modal-password-recovery-base.component';
import { PoModalPasswordRecoveryModalContent } from './enums/po-modal-password-recovery-modal-content.enum';
import { PoModalPasswordRecoveryService } from './po-modal-password-recovery.service';
import { PoModalPasswordRecoveryType } from './enums/po-modal-password-recovery-type.enum';
/**
 * @docsExtends PoModalPasswordRecoveryBaseComponent
 *
 * @example
 *
 * <example name="po-modal-password-recovery-basic" title="PO Modal Password Recovery Basic">
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-labs" title="PO Modal Password Recovery Labs">
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-request" title="PO Modal Password Recovery Request">
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.ts"> </file>
 * </example>
 */
export class PoModalPasswordRecoveryComponent extends PoModalPasswordRecoveryBaseComponent {
    constructor(router, poI18nPipe, poModalPasswordRecoveryService) {
        super();
        this.router = router;
        this.poI18nPipe = poI18nPipe;
        this.poModalPasswordRecoveryService = poModalPasswordRecoveryService;
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.codeMask = '9 9 9 9 9 9';
        this.emailModal = true;
        this.emailModalPhrases = { firstPhrase: null, secondPhrase: null };
        this.endpoint = '.';
        this.invalidCode = false;
        this.invalidEmail = false;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.submittedCodeValue = {};
        this.submittedContactValue = {};
        this.primaryAction = { label: undefined, action: () => { } };
        this.secondaryAction = { label: undefined, action: () => { } };
        this.typeFormOptions = [
            { label: 'e-mail', value: PoModalPasswordRecoveryType.Email },
            { label: 'SMS', value: PoModalPasswordRecoveryType.SMS }
        ];
    }
    ngOnDestroy() {
        if (this.passwordRecoverySubscription) {
            this.passwordRecoverySubscription.unsubscribe();
        }
        if (this.smsCodeSubscription) {
            this.smsCodeSubscription.unsubscribe();
        }
    }
    completed() {
        this.cancelAction();
    }
    formModelChangesCheck(form) {
        const invalidForm = form.invalid;
        this.invalidEmail = invalidForm && form.dirty;
        this.primaryAction.disabled = invalidForm;
        if (this.modalType === PoModalPasswordRecoveryModalContent.SMSCode) {
            const codeError = this.codeError !== undefined && this.codeError !== '';
            this.showCustomCodeError = codeError && form.pristine;
        }
    }
    getInputType(type) {
        this.type = type;
        this.pipeModalPhrases();
        setTimeout(() => {
            this.control = this.emailForm.controls[type];
            this.formModelChangesCheck(this.emailForm);
            this.resetFormFields(this.control);
        });
    }
    open() {
        const control = this.checkFormType(this.type);
        this.control = this.emailForm.controls[control];
        this.setEmailModalPhrasesAndActions();
        this.formModelChangesCheck(this.emailForm);
        this.recoveryModalElement.open();
    }
    openConfirmation() {
        this.modalTitle = this.literals.emailSentTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.Confirmation;
        this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);
    }
    openSmsCode() {
        this.modalTitle = this.literals.typeCodeTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.SMSCode;
        this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);
        setTimeout(() => {
            this.control = this.smsCodeForm.controls['sms'];
            this.formModelChangesCheck(this.smsCodeForm);
        });
    }
    resendSmsCode() {
        this.incrementRetryAttempts();
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    assignSmsResponse(responseObj) {
        this.smsBodyResponse = Object.assign({}, { hash: responseObj.hash });
        if (responseObj.urlValidationCode) {
            this.smsBodyResponse = Object.assign(this.smsBodyResponse, { urlValidationCode: responseObj.urlValidationCode });
        }
    }
    cancelAction() {
        this.resetFormFields(this.control);
        this.submittedContactValue = {};
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.type = this.modalPasswordRecoveryTypeAll ? PoModalPasswordRecoveryType.All : this.type;
        this.recoveryModalElement.close();
    }
    checkFormType(type) {
        return type !== PoModalPasswordRecoveryType.All ? type : PoModalPasswordRecoveryType.Email;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    getEmitValue(type) {
        return type === PoModalPasswordRecoveryType.SMS ? this.phone : this.email;
    }
    incrementRetryAttempts() {
        this.submittedContactValue.retry = this.submittedContactValue.retry + 1 || 1;
    }
    openExternalLink(url, queryParam) {
        window.open(`${url}?token=${queryParam}`, '_self');
    }
    openInternalLink(url, endpoint, queryParam) {
        this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });
    }
    pipeModalPhrases() {
        if (this.type === PoModalPasswordRecoveryType.SMS) {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);
        }
        else {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.email);
        }
    }
    redirectToChangePassword(recoveryToken) {
        const urlChangePassword = recoveryToken.urlChangePassword;
        if (urlChangePassword) {
            isExternalLink(urlChangePassword)
                ? this.openExternalLink(urlChangePassword, recoveryToken.token)
                : this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);
        }
        else {
            const changePasswordEndpoint = 'changePassword';
            this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);
        }
    }
    resetFormFields(control) {
        this.formReset(control);
        this.email = undefined;
        this.phone = undefined;
        this.smsCode = undefined;
    }
    setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {
        this.primaryAction.action = () => primaryAction.call(this);
        this.primaryAction.label = primarylabel;
        this.secondaryAction.action = () => secondaryAction.call(this);
        this.secondaryAction.label = secondaryLabel;
        this.primaryAction.disabled = disabled;
    }
    setEmailModalPhrasesAndActions() {
        this.modalTitle = this.literals.forgotPasswordTitle;
        this.pipeModalPhrases();
        this.modalPasswordRecoveryTypeAll = this.type === PoModalPasswordRecoveryType.All;
        this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);
    }
    setRequestEndpoint(urlValidationCode) {
        const endpoint = urlValidationCode || 'validation';
        return `${this.urlRecovery}/${endpoint}`;
    }
    setPipeArguments(literalAttr, arg) {
        return this.poI18nPipe.transform(literalAttr, arg);
    }
    submitAction() {
        this.modalType === PoModalPasswordRecoveryModalContent.Confirmation
            ? this.incrementRetryAttempts()
            : this.formReset(this.control);
        this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    submitActionRequest(data, modalType) {
        const params = modalType === PoModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;
        this.passwordRecoverySubscription = this.poModalPasswordRecoveryService
            .post(this.urlRecovery, data, params)
            .subscribe(response => {
            if ((modalType === PoModalPasswordRecoveryType.Email || modalType === PoModalPasswordRecoveryType.All) &&
                response.status === 204) {
                this.openConfirmation();
            }
            else if (modalType === PoModalPasswordRecoveryType.SMS && response.status === 200) {
                this.assignSmsResponse(response.body);
                this.openSmsCode();
            }
        });
    }
    submitSmsCodeAction() {
        this.submittedCodeValue.code = this.smsCode;
        if (this.urlRecovery) {
            this.submittedCodeValue = Object.assign(this.submittedCodeValue, { hash: this.smsBodyResponse.hash });
            this.submitSmsCodeRequest(this.submittedCodeValue);
        }
        else {
            this.codeSubmit.emit(this.submittedCodeValue);
        }
        this.resetFormFields(this.control);
    }
    submitSmsCodeRequest(data) {
        this.smsCodeSubscription = this.poModalPasswordRecoveryService
            .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)
            .subscribe(response => {
            const successStatus = response.status === 200;
            if (successStatus) {
                this.completed();
                this.redirectToChangePassword(response.body);
            }
        }, error => {
            this.codeError = error.error.message;
            this.openSmsCode();
        });
    }
}
PoModalPasswordRecoveryComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-modal-password-recovery',
                template: "<po-modal\n  #recoveryModal\n  p-hide-close\n  p-size=\"auto\"\n  [ngSwitch]=\"modalType\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"modalTitle\"\n>\n  <div class=\"po-modal-password-recovery-wrapper\">\n    <div *ngSwitchCase=\"'email'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">\n        {{ emailModalPhrases.firstPhrase }}\n      </div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #emailForm=\"ngForm\">\n          <div *ngIf=\"modalPasswordRecoveryTypeAll\">\n            <po-radio-group\n              name=\"type\"\n              [(ngModel)]=\"chosenTypeFormOption\"\n              [p-options]=\"typeFormOptions\"\n              (p-change)=\"getInputType($event)\"\n            >\n            </po-radio-group>\n          </div>\n\n          <div class=\"po-mt-1\">\n            <po-email\n              *ngIf=\"type === 'email' || type === 'all'\"\n              name=\"email\"\n              [(ngModel)]=\"email\"\n              p-required\n              [p-label]=\"literals.insertEmail\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\"\n            >\n            </po-email>\n\n            <po-input\n              *ngIf=\"type === 'sms'\"\n              name=\"sms\"\n              [(ngModel)]=\"phone\"\n              p-icon=\"po-icon-telephone\"\n              p-required\n              [p-label]=\"literals.insertPhone\"\n              [p-mask]=\"phoneMask\"\n              [p-maxlength]=\"maxLength\"\n              [p-minlength]=\"minLength\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\"\n            >\n            </po-input>\n          </div>\n\n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message\n              *ngIf=\"invalidEmail && control.dirty\"\n              [p-text]=\"type === 'sms' ? literals.phoneErrorMessagePhrase : literals.emailErrorMessagePhrase\"\n            >\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">\n        {{ emailModalPhrases.secondPhrase }}\n        <span *ngIf=\"contactEmail\">\n          {{ literals.prepositionIn }}\n          <a class=\"po-modal-password-recovery-link\" href=\"mailto:{{ contactEmail }}\" target=\"_self\">\n            {{ contactEmail }}\n          </a>\n        </span>\n        {{ endpoint }}\n      </div>\n    </div>\n\n    <div #smsCodeModal *ngSwitchCase=\"'smsCode'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">{{ literals.sentSmsCodePhrase }}</div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #smsCodeForm=\"ngForm\">\n          <po-input\n            name=\"sms\"\n            [(ngModel)]=\"smsCode\"\n            p-maxlength=\"11\"\n            p-minlength=\"11\"\n            p-required\n            [p-label]=\"literals.insertCode\"\n            [p-mask]=\"codeMask\"\n            (p-change-model)=\"formModelChangesCheck(smsCodeForm)\"\n          >\n          </po-input>\n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message\n              *ngIf=\"invalidEmail\"\n              [p-text]=\"smsCodeErrorMessage || this.literals.smsCodeErrorMessagePhrase\"\n            >\n            </po-modal-password-recovery-error-message>\n            <po-modal-password-recovery-error-message *ngIf=\"showCustomCodeError\" [p-text]=\"codeError\">\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">\n        {{ literals.sendAgainPhrase }}\n        <span class=\"po-modal-password-recovery-link\" (click)=\"resendSmsCode()\">{{ literals.sendAgain }}</span>\n      </div>\n    </div>\n\n    <div #confirmationModal *ngSwitchCase=\"'confirmation'\" class=\"po-modal-password-recovery-content po-row\">\n      <img class=\"po-modal-password-recovery-user-image po-mb-2\" src=\"./assets/images/email-sent.svg\" />\n      <div class=\"po-modal-password-recovery-text\">\n        {{ literals.emailSentConfirmationPhrase }}\n      </div>\n    </div>\n  </div>\n</po-modal>\n"
            },] }
];
PoModalPasswordRecoveryComponent.ctorParameters = () => [
    { type: Router },
    { type: PoI18nPipe },
    { type: PoModalPasswordRecoveryService }
];
PoModalPasswordRecoveryComponent.propDecorators = {
    emailForm: [{ type: ViewChild, args: ['emailForm',] }],
    recoveryModalElement: [{ type: ViewChild, args: ['recoveryModal', { static: true },] }],
    smsCodeForm: [{ type: ViewChild, args: ['smsCodeForm',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Component, Input } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { concat, EMPTY, throwError, of } from 'rxjs';
import { tap, catchError, map, switchMap } from 'rxjs/operators';
import { PoDialogService, PoLanguageService, PoNotificationService } from '@po-ui/ng-components';
import * as util from '../../utils/util';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageDynamicDetailActionsService } from './po-page-dynamic-detail-actions.service';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
export const poPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    },
    ru: {
        pageActionEdit: 'Редактировать',
        pageActionRemove: 'Удалить',
        pageActionBack: 'Назад',
        confirmRemoveTitle: 'Подтверждение удаления',
        confirmRemoveMessage: 'Вы уверены, что хотите удалить эту запись?  Вы не можете отменить это действие.',
        removeNotificationSuccess: 'Элемент успешно удален.',
        registerNotFound: 'Запись не найдена.'
    }
};
/**
 * @description
 *
 * O `po-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-detail` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * O componente primeiro irá carregar o metadado da rota definida na propriedade serviceMetadataApi
 * e depois irá buscar da rota definida na propriedade serviceLoadApi.
 *
 * > Caso o servidor retornar um erro ao recuperar o metadados, será repassado o metadados salvo em cache,
 * se o cache não existe será disparado uma notificação.
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicDetailComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata', // endpoint dos metadados
 *     serviceLoadApi: 'http://localhost:3000/load-metadata' // endpoint de customizações dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicDetailMetadata](/documentation/po-page-dynamic-detail#po-page-dynamic-detail-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Detail',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=detail&version={version}
 * ```
 *
 * @example
 *
 * <example name="po-page-dynamic-detail-user" title="PO Page Dynamic Detail User">
 *  <file name="sample-po-page-dynamic-detail-user/sample-po-page-dynamic-detail-user.component.html"> </file>
 *  <file name="sample-po-page-dynamic-detail-user/sample-po-page-dynamic-detail-user.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicDetailComponent {
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService, poPageDynamicDetailActionsService, poPageCustomizationService, languageService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageDynamicDetailActionsService = poPageDynamicDetailActionsService;
        this.poPageCustomizationService = poPageCustomizationService;
        this.subscriptions = [];
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.model = {};
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        const language = languageService.getShortLanguage();
        this.literals = Object.assign(Object.assign({}, poPageDynamicDetailLiteralsDefault[util.poLocaleDefault]), poPageDynamicDetailLiteralsDefault[language]);
    }
    /**
     * @optional
     *
     * @description
     *
     * Define as ações da página de acordo com a interface `PoPageDynamicDetailActions`.
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    get actions() {
        return Object.assign({}, this._actions);
    }
    /**
     * @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * @optional
     *
     * @description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * @default false
     */
    set autoRouter(value) {
        this._autoRouter = util.convertToBoolean(value);
    }
    get autoRouter() {
        return this._autoRouter;
    }
    /** Lista dos campos exibidos na página. */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this.fields);
        this._duplicates = this.getDuplicatesByFields(this.fields);
    }
    get fields() {
        return this._fields;
    }
    ngOnInit() {
        this.loadDataFromAPI();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.forEach(subscription => {
                subscription.unsubscribe();
            });
        }
    }
    get duplicates() {
        return [...this._duplicates];
    }
    get keys() {
        return [...this._keys];
    }
    get pageActions() {
        return [...this._pageActions];
    }
    remove(actionRemove, actionBeforeRemove) {
        const uniqueKey = this.formatUniqueKey(this.model);
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeRemove(actionBeforeRemove, uniqueKey, Object.assign({}, this.model))
            .pipe(switchMap((beforeRemoveResult) => {
            var _a, _b;
            const newRemoveAction = (_a = beforeRemoveResult === null || beforeRemoveResult === void 0 ? void 0 : beforeRemoveResult.newUrl) !== null && _a !== void 0 ? _a : actionRemove;
            const allowAction = (_b = beforeRemoveResult === null || beforeRemoveResult === void 0 ? void 0 : beforeRemoveResult.allowAction) !== null && _b !== void 0 ? _b : true;
            if (!allowAction) {
                return of({});
            }
            if (typeof newRemoveAction === 'string') {
                return this.executeRemove(newRemoveAction, uniqueKey);
            }
            else {
                newRemoveAction(uniqueKey, Object.assign({}, this.model));
                return EMPTY;
            }
        }))
            .subscribe());
    }
    confirmRemove(actionRemove, actionBeforeRemove) {
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, actionRemove, actionBeforeRemove)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    executeRemove(path, uniqueKey) {
        return this.poPageDynamicService.deleteResource(uniqueKey).pipe(map(() => {
            this.poNotification.success(this.literals.removeNotificationSuccess);
            this.navigateTo({ path: path });
        }));
    }
    formatUniqueKey(item) {
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    goBack(actionBack) {
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeBack(this.actions.beforeBack)
            .subscribe((beforeBackResult) => this.executeBackAction(actionBack, beforeBackResult === null || beforeBackResult === void 0 ? void 0 : beforeBackResult.allowAction, beforeBackResult === null || beforeBackResult === void 0 ? void 0 : beforeBackResult.newUrl)));
    }
    executeBackAction(actionBack, allowAction, newUrl) {
        const isAllowedAction = typeof allowAction === 'boolean' ? allowAction : true;
        if (isAllowedAction) {
            if (actionBack === undefined || typeof actionBack === 'boolean') {
                return window.history.back();
            }
            if (typeof actionBack === 'string' || newUrl) {
                return this.router.navigate([newUrl || actionBack]);
            }
            return actionBack();
        }
    }
    loadData(id) {
        return this.poPageDynamicService.getResource(id).pipe(tap(response => {
            if (!response) {
                this.setUndefinedToModelAndActions();
            }
            else {
                this.model = response;
            }
        }), catchError(error => {
            this.setUndefinedToModelAndActions();
            return throwError(error);
        }));
    }
    setUndefinedToModelAndActions() {
        this.model = undefined;
        this.actions = undefined;
    }
    getMetadata(serviceApiFromRoute, onLoad) {
        if (serviceApiFromRoute) {
            return this.poPageDynamicService.getMetadata('detail').pipe(tap(response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
            }), switchMap(() => this.loadOptionsOnInitialize(onLoad)));
        }
        return this.loadOptionsOnInitialize(onLoad);
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params }).catch(() => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift({
                path: route.path,
                component: route.component,
                data: { serviceApi: this.serviceApi, autoRouter: true }
            });
            this.navigateTo(route, true);
        });
    }
    openEdit(action) {
        const id = this.formatUniqueKey(this.model);
        this.subscriptions.push(this.poPageDynamicDetailActionsService
            .beforeEdit(this.actions.beforeEdit, id, this.model)
            .pipe(switchMap((beforeEditResult) => this.executeEditAction(action, beforeEditResult, id)))
            .subscribe());
    }
    executeEditAction(action, beforeEditResult, id) {
        var _a, _b;
        const newEditAction = (_a = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.newUrl) !== null && _a !== void 0 ? _a : action;
        const allowAction = (_b = beforeEditResult === null || beforeEditResult === void 0 ? void 0 : beforeEditResult.allowAction) !== null && _b !== void 0 ? _b : true;
        if (!allowAction) {
            return of({});
        }
        if (typeof newEditAction === 'string') {
            this.openEditUrl(newEditAction);
        }
        else {
            newEditAction(id, Object.assign({}, this.model));
        }
        return EMPTY;
    }
    openEditUrl(path) {
        const url = this.resolveUrl(this.model, path);
        this.navigateTo({ path, url });
    }
    resolveUrl(item, path) {
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    getPageActions(actions = {}) {
        const pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({
                label: this.literals.pageActionRemove,
                action: this.confirmRemove.bind(this, actions.remove, this.actions.beforeRemove)
            });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    }
    getKeysByFields(fields = []) {
        return fields.filter(field => field.key === true).map(field => field.property);
    }
    getDuplicatesByFields(fields = []) {
        return fields.filter(field => field.duplicate === true).map(field => field.property);
    }
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
    loadDataFromAPI() {
        const { serviceApi: serviceApiFromRoute, serviceMetadataApi, serviceLoadApi } = this.activatedRoute.snapshot.data;
        const { id } = this.activatedRoute.snapshot.params;
        const onLoad = serviceLoadApi || this.onLoad;
        this.serviceApi = serviceApiFromRoute || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        const metadata$ = this.getMetadata(serviceApiFromRoute, onLoad);
        const data$ = this.loadData(id);
        this.subscriptions.push(concat(metadata$, data$).subscribe());
    }
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
        }
        return EMPTY;
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-detail',
                template: "<po-page-default [p-actions]=\"pageActions\" [p-breadcrumb]=\"breadcrumb\" [p-title]=\"title\">\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\"> </ng-container>\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n  <po-dynamic-view [p-fields]=\"fields\" [p-value]=\"model\"> </po-dynamic-view>\n</ng-template>\n",
                providers: [PoPageDynamicService, PoPageDynamicDetailActionsService]
            },] }
];
PoPageDynamicDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService },
    { type: PoPageDynamicDetailActionsService },
    { type: PoPageCustomizationService },
    { type: PoLanguageService }
];
PoPageDynamicDetailComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    title: [{ type: Input, args: ['p-title',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }]
};
//# sourceMappingURL=data:application/json;base64,
import { Input, Directive } from '@angular/core';
import { PoPageJobSchedulerInternal } from './po-page-job-scheduler-internal';
import { PoPageJobSchedulerService } from './po-page-job-scheduler.service';
import { Subscription } from 'rxjs';
/**
 * @description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
export class PoPageJobSchedulerBaseComponent {
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        this._subscription = new Subscription();
        /** Objeto com as propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        this.model = new PoPageJobSchedulerInternal();
    }
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    loadData(id) {
        if (!id) {
            this.model = new PoPageJobSchedulerInternal();
            return;
        }
        this._subscription.add(this.poPageJobSchedulerService.getResource(id).subscribe((response) => {
            this.model = response;
        }, () => {
            this.model = new PoPageJobSchedulerInternal();
        }));
    }
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
}
PoPageJobSchedulerBaseComponent.decorators = [
    { type: Directive }
];
PoPageJobSchedulerBaseComponent.ctorParameters = () => [
    { type: PoPageJobSchedulerService }
];
PoPageJobSchedulerBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1qb2Itc2NoZWR1bGVyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGVtcGxhdGVzL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlLWpvYi1zY2hlZHVsZXIvcG8tcGFnZS1qb2Itc2NoZWR1bGVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBSzVELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEM7Ozs7Ozs7Ozs7R0FVRztBQUVILE1BQU0sT0FBTywrQkFBK0I7SUE2STFDLFlBQXNCLHlCQUFvRDtRQUFwRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBNUlsRSxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0MsZ0RBQWdEO1FBQ3pCLGVBQVUsR0FBa0IsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7UUF1SWpFLFVBQUssR0FBMkIsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO0lBRVksQ0FBQztJQUU5RSxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRVMsUUFBUSxDQUFDLEVBQW1CO1FBQ3BDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQztZQUM5QyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FDcEIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQ3RELENBQUMsUUFBZ0MsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLENBQUMsRUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVTLDBCQUEwQixDQUFDLFFBQTRDO1FBQy9FLEtBQUssTUFBTSxHQUFHLElBQUksUUFBUSxFQUFFO1lBQzFCLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUU5QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7b0JBQ25CLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDdkI7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7O1lBaExGLFNBQVM7OztZQWRELHlCQUF5Qjs7O3lCQW1CL0IsS0FBSyxTQUFDLGNBQWM7eUJBa0lwQixLQUFLLFNBQUMsZUFBZTtvQkFHckIsS0FBSyxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9CcmVhZGNydW1iIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBQb0pvYlNjaGVkdWxlckludGVybmFsIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWpvYi1zY2hlZHVsZXItaW50ZXJuYWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUpvYlNjaGVkdWxlckludGVybmFsIH0gZnJvbSAnLi9wby1wYWdlLWpvYi1zY2hlZHVsZXItaW50ZXJuYWwnO1xuaW1wb3J0IHsgUG9QYWdlSm9iU2NoZWR1bGVyU2VydmljZSB9IGZyb20gJy4vcG8tcGFnZS1qb2Itc2NoZWR1bGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tcGFnZS1qb2Itc2NoZWR1bGVyYCDDqSB1bWEgcMOhZ2luYSBwYXJhIGNyaWHDp8OjbyBlIGF0dWFsaXphw6fDo28gZGUgYWdlbmRhbWVudG9zIGRhIGV4ZWN1w6fDo28gZGUgcHJvY2Vzc29zIChKb2IgU2NoZWR1bGVyKSxcbiAqIGNvbW8gcG9yIGV4ZW1wbG86IGEgZ2VyYcOnw6NvIGRhIGZvbGhhIGRlIHBhZ2FtZW50byBkb3MgZnVuY2lvbsOhcmlvcy5cbiAqXG4gKiBQYXJhIHV0aWxpemFyIGVzdGEgcMOhZ2luYSwgYmFzdGEgaW5mb3JtYXIgbyBzZXJ2acOnbyAoZW5kcG9pbnQpIHBhcmEgY29uc3VtbyxcbiAqIHNlbSBhIG5lY2Vzc2lkYWRlIGRlIGNyaWFyIGNvbXBvbmVudGVzIGUgdHJhdGFtZW50b3MgZG9zIGRhZG9zLlxuICpcbiAqIFZlamEgbWFpcyBzb2JyZSBvcyBwYWRyw7VlcyB1dGlsaXphZG9zIG5hcyByZXF1aXNpw6fDtWVzIG5vIFtHdWlhIGRlIGltcGxlbWVudGHDp8OjbyBkZSBBUElzXShndWlkZXMvYXBpKS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9QYWdlSm9iU2NoZWR1bGVyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICAvKiogT2JqZXRvIGNvbSBhcyBwcm9wcmllZGFkZXMgZG8gYnJlYWRjcnVtYi4gKi9cbiAgQElucHV0KCdwLWJyZWFkY3J1bWInKSBicmVhZGNydW1iPzogUG9CcmVhZGNydW1iID0geyBpdGVtczogW10gfTtcblxuICAvKipcbiAgICogRW5kcG9pbnQgdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgYnVzY2EgZG9zIHByb2Nlc3NvcyBlIHBhcsOibWV0cm9zIHF1ZSBzZXLDo28gdXRpbGl6YWRvcyBwYXJhIGNyaWHDp8OjbyBlIGVkacOnw6NvIGRvcyBhZ2VuZGFtZW50b3MuXG4gICAqXG4gICAqICMjIyMgUHJvY2Vzc29zXG4gICAqXG4gICAqIE9zIHByb2Nlc3NvcyBzw6NvIGFzIHRhcmVmYXMgcXVlIGVzdGFyw6NvIGRpc3BvbsOtdmVpcyBwYXJhIG8gdXN1w6FyaW8gcG9kZXIgZmF6ZXIgb3MgYWdlbmRhbWVudG9zLlxuICAgKiBBbyBpbmljaWFsaXphciBvIGNvbXBvbmVudGUsIHNlcsOhIGZlaXRvIHVtYSByZXF1aXNpw6fDo28gYEdFVGAgcGFyYSBvIGVuZHBvaW50IGB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlc2AsIHBhcmEgYnVzY2FyXG4gICAqIGVzc2EgbGlzdGEgZGUgcHJvY2Vzc29zLlxuICAgKlxuICAgKiBFc3RlIGVuZHBvaW50IGB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlc2AgZGV2ZSByZXRvcm5hciB1bWEgbGlzdGEgZGUgb2JqZXRvcyBxdWUgc2VndWVtIGEgZGVmaW5pw6fDo28gZGUgZGFkb3MgYWJhaXhvOlxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIHtzZXJ2aWNlLWFwaX0vcHJvY2Vzc2VzXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICoge1xuICAgKiAgIGl0ZW1zOiBbXG4gICAqICAgICB7IFwicHJvY2Vzc0lEXCI6IFwiYWM0ZlwiLCBcImRlc2NyaXB0aW9uXCI6IFwiR2VyYXIgZm9saGEgZGUgcGFnYW1lbnRvXCIgfSxcbiAgICogICAgIHsgXCJwcm9jZXNzSURcIjogXCJkZjZsXCIsIFwiZGVzY3JpcHRpb25cIjogXCJSZWxhdMOzcmlvIGRlIGltcG9zdG8gYSByZWNvbGhlclwiIH0sXG4gICAqICAgICB7IFwicHJvY2Vzc0lEXCI6IFwiZGszcFwiLCBcImRlc2NyaXB0aW9uXCI6IFwiVMOtdHVsb3MgZW0gYWJlcnRvXCIgfSxcbiAgICogICBdXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIERlc3RhIGZvcm1hIHNlcsOhIHJlbmRlcml6YWRvIHVtIGNvbXBvbmVudGUgcGFyYSBzZWxlY2lvbmFyIG8gcHJvY2Vzc28gZS9vdSBmaWx0csOhLWxvcy5cbiAgICpcbiAgICogUGFyYSByZWFsaXphciBvIGZpbHRybyBkZSBidXNjYSBkbyBwcm9jZXNzbywgc2Vyw6EgZmVpdGEgdW1hIHJlcXVpc2nDp8OjbyBlbnZpYW5kbyBvIGNvbnRlw7pkbyBkaWdpdGFkbyBuYSBidXNjYSBhdHJhdsOpcyBkb1xuICAgKiBwYXLDom1ldHJvIGBzZWFyY2hgLiBEYSBzZWd1aW50ZSBmb3JtYTpcbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCB7c2VydmljZS1hcGl9L3Byb2Nlc3Nlcz9zZWFyY2g9cmVsYXRvcmlvXG4gICAqIGBgYFxuICAgKlxuICAgKiA+IFZlamEgbWFpcyBzb2JyZSBwYWdpbmHDp8OjbyBlIGZpbHRyb3Mgbm8gW0d1aWEgZGUgaW1wbGVtZW50YcOnw6NvIGRlIEFQSXNdKGd1aWRlcy9hcGkpLlxuICAgKlxuICAgKiBUYW1iw6ltIMOpIHBvc3PDrXZlbCBmYXplciB1bSBhZ2VuZGFtZW50byBkZSB1bSBwcm9jZXNzbyBlc3BlY8OtZmljbywgc2VtIHF1ZSBzZWphIG5lY2Vzc8OhcmlvIHVtIGVuZHBvaW50IHBhcmEgYnVzY2EgZGVzc2VzXG4gICAqIHByb2Nlc3Nvcy4gRW50w6NvLCBjYXNvIG8gZW5kcG9pbnQgYHtzZXJ2aWNlLWFwaX0vcHJvY2Vzc2VzYCBuw6NvIHNlamEgdsOhbGlkbywgc2Vyw6EgYXByZXNlbnRhZG8gdW0gY2FtcG8gZGUgZW50cmFkYSBkZVxuICAgKiB0ZXh0byBwYXJhIG8gdXN1w6FyaW8gaW5mb3JtYXIgZGlyZXRhbWVudGVcbiAgICogbyAqKmlkZW50aWZpY2Fkb3IgZG8gcHJvY2Vzc28gLSBgcHJvY2Vzc0lEYCoqIGUgYW8gc2FsdmFyIHNlcsOhIGVudmlhZG8gdW0gYFBPU1RgIHBhcmEgbyBlbmRwb2ludCBkaWZpbmlkbyBgc2VydmljZUFwaWAgY29uZm9ybWUgYWJhaXhvOlxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVCB7c2VydmljZS1hcGl9XG4gICAqIGBgYFxuICAgKlxuICAgKiAqUmVxdWVzdCBwYXlsb2FkKiAtIGVzdHJ1dHVyYSBkZSBkYWRvcyBlbnZpYWRhIG5vIGNvcnBvIGRhIHJlcXVpc2nDp8OjbyBjb25mb3JtZSBpbnRlcmZhY2UgYFBvSm9iU2NoZWR1bGVyYDpcbiAgICpcbiAgICogYGBgXG4gICAqIHtcbiAgICogICBcImRhaWx5XCI6IHsgXCJob3VyXCI6IDEwLCBcIm1pbnV0ZVwiOiAxMiB9LFxuICAgKiAgIFwiZmlyc3RFeGVjdXRpb25cIjogXCIyMDE4LTEyLTA3VDAwOjAwOjAxLTAwOjAwXCIsXG4gICAqICAgXCJyZWN1cnJlbnRcIjogdHJ1ZSxcbiAgICogICBcInByb2Nlc3NJRFwiOiBcImFjMDQwNVwiXG4gICAqICAgLi4uXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIENhc28gc2VqYSBuZWNlc3PDoXJpbyBpbmZvcm1hciBwYXLDom1ldHJvcyBlIGFkaWNpb25hciBjb25maWd1cmHDp8O1ZXMgbm8gcHJvY2Vzc28gc2VsZWNpb25hZG8sIHNlcsOhIHJlYWxpemFkbyB1bSBgR0VUYFxuICAgKiBjb21vIGV4ZW1wbGlmaWNhZG8gYWJhaXhvLiBPcyBwYXLDom1ldHJvcyBkZXZlbSByZXRvcm5hciB1bWEgbGlzdGEgZGUgb2JqZXRvcyBxdWUgc2VndWVtIGEgaW50ZXJmYWNlXG4gICAqIFtQb0R5bmFtaWNGb3JtRmllbGRdKC9kb2N1bWVudGF0aW9uL3BvLWR5bmFtaWMtZm9ybSkuXG4gICAqXG4gICAqIGBgYFxuICAgKiBHRVQge3NlcnZpY2UtYXBpfS9wcm9jZXNzZXMvOmlkL3BhcmFtZXRlcnNcbiAgICogLi4uXG4gICAqIHtcbiAgICogICBpdGVtczogW1xuICAgKiAgICAgeyBcInByb3BlcnR5XCI6IFwidmVuY2ltZW50b1wiLCB0eXBlOiBcImRhdGVcIiB9LFxuICAgKiAgICAgeyBcInByb3BlcnR5XCI6IFwiaW1wb3N0by1yZXRpZG9cIiwgXCJsYWJlbFwiOiBcIkltcG9zdG8gUmV0aWRvXCIsIHR5cGU6IFwiYm9vbGVhblwiIH1cbiAgICogICBdXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqICMjIyMgU2FsdmFyIGUgQXR1YWxpemFyXG4gICAqXG4gICAqIFBhcmEgc2FsdmFyIG8gYWdlbmRhbWVudG8sIHNlcsOhIGZlaXRhIHVtYSByZXF1aXNpw6fDo28gZGUgY3JpYcOnw6NvLCBwYXNzYW5kbyBvcyB2YWxvcmVzIHByZWVuY2hpZG9zIHBlbG8gdXN1w6FyaW8gdmlhICpwYXlsb2FkKi5cbiAgICogQWJhaXhvIHVtYSByZXF1aXNpw6fDo28gYFBPU1RgIGRpc3BhcmFkYSwgb25kZSBhcyBwcm9wcmllZGFkZXMgZG8gKkpvYiBTY2hlZHVsZXIqIGZvcmFtIHByZWVuY2hpZGFzOlxuICAgKlxuICAgKiBgYGBcbiAgICogIFBPU1Qge3NlcnZpY2UtYXBpfVxuICAgKiBgYGBcbiAgICpcbiAgICogKlJlcXVlc3QgcGF5bG9hZCogLSBlc3RydXR1cmEgZGUgZGFkb3MgZW52aWFkYSBubyBjb3JwbyBkYSByZXF1aXNpw6fDo28gY29uZm9ybWUgaW50ZXJmYWNlIGBQb0pvYlNjaGVkdWxlcmA6XG4gICAqXG4gICAqIGBgYFxuICAgKiB7XG4gICAqICAgXCJmaXJzdEV4ZWN1dGlvblwiOiBcIjIwMTgtMTItMDdUMDA6MDA6MDEtMDA6MDBcIixcbiAgICogICBcInJlY3VycmVudFwiOiB0cnVlLFxuICAgKiAgIFwiZGFpbHlcIjogeyBcImhvdXJcIjogMTAsIFwibWludXRlXCI6IDEyIH0sXG4gICAqICAgXCJwcm9jZXNzSURcIjogXCJhYzA0MDVcIlxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBDYXNvIHF1ZWlyYSBxdWUgbyBjb21wb25lbnRlIGNhcnJlZ3VlIHVtIGFnZW5kYW1lbnRvIGrDoSBleGlzdGVudGUsIGRldmUgc2VyIGluY2x1w61kbyB1bSBwYXLDom1ldHJvIG5hIHJvdGEgY2hhbWFkbyBgaWRgLlxuICAgKlxuICAgKiBFeGVtcGxvIGRlIGNvbmZpZ3VyYcOnw6NvIGRlIHJvdGE6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgUm91dGVyTW9kdWxlLmZvclJvb3QoW1xuICAgKiAgICAuLi5cbiAgICogICAgeyBwYXRoOiAnZWRpdC86aWQnLCBjb21wb25lbnQ6IEV4YW1wbGVKb2JTY2hlZHVsZXJDb21wb25lbnQgfSxcbiAgICogICAgLi4uXG4gICAqICBdLFxuICAgKiBgYGBcbiAgICpcbiAgICogQmFzZWFkbyBuaXNzbywgbmEgaW5pY2lhbGl6YcOnw6NvIGRvIHRlbXBsYXRlIHNlcsOhIGRpc3BhcmFkbyB1bWEgcmVxdWlzacOnw6NvIHBhcmEgYnVzY2FyIG8gcmVjdXJzbyBxdWUgc2Vyw6EgZWRpdGFkby5cbiAgICpcbiAgICogYGBgXG4gICAqIEdFVCB7c2VydmljZS1hcGl9L3tpZH1cbiAgICogYGBgXG4gICAqXG4gICAqIEFvIGF0dWFsaXphciBvIGFnZW5kYW1lbnRvLCBzZXLDoSBkaXNwYXJhZG8gdW0gYFBVVGAgY29tIG9zIGRhZG9zIHByZWVuY2hpZG9zLlxuICAgKiBWZWphIGFiYWl4byB1bWEgcmVxdWlzacOnw6NvIGBQVVRgIGRpc3BhcmFkYSwgb25kZSBhIHByb3ByaWVkYWRlICpyZWN1cnJlbnQqIGUgKmRhaWx5KiBmb3JhbSBhdHVhbGl6YWRhczpcbiAgICpcbiAgICogYGBgXG4gICAqICBQVVQge3NlcnZpY2UtYXBpfS97aWR9XG4gICAqIGBgYFxuICAgKlxuICAgKiAqUmVxdWVzdCBwYXlsb2FkKiAtIGVzdHJ1dHVyYSBkZSBkYWRvcyBlbnZpYWRhIG5vIGNvcnBvIGRhIHJlcXVpc2nDp8OjbyBjb25mb3JtZSBpbnRlcmZhY2UgYFBvSm9iU2NoZWR1bGVyYDpcbiAgICpcbiAgICogYGBgXG4gICAqIHtcbiAgICogICBcImZpcnN0RXhlY3V0aW9uXCI6IFwiMjAxOC0xMi0wN1QwMDowMDowMS0wMDowMFwiLFxuICAgKiAgIFwicmVjdXJyZW50XCI6IGZhbHNlLFxuICAgKiAgIFwiZGFpbHlcIjogeyBcImhvdXJcIjogMTEsIFwibWludXRlXCI6IDMwIH0sXG4gICAqICAgXCJwcm9jZXNzSURcIjogXCJhYzA0MDVcIlxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLXNlcnZpY2UtYXBpJykgc2VydmljZUFwaTogc3RyaW5nO1xuXG4gIC8qKiBUw610dWxvIGRhIHDDoWdpbmEuICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XG5cbiAgbW9kZWw6IFBvSm9iU2NoZWR1bGVySW50ZXJuYWwgPSBuZXcgUG9QYWdlSm9iU2NoZWR1bGVySW50ZXJuYWwoKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcG9QYWdlSm9iU2NoZWR1bGVyU2VydmljZTogUG9QYWdlSm9iU2NoZWR1bGVyU2VydmljZSkge31cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkRGF0YShpZDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhpcy5tb2RlbCA9IG5ldyBQb1BhZ2VKb2JTY2hlZHVsZXJJbnRlcm5hbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbi5hZGQoXG4gICAgICB0aGlzLnBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2UuZ2V0UmVzb3VyY2UoaWQpLnN1YnNjcmliZShcbiAgICAgICAgKHJlc3BvbnNlOiBQb0pvYlNjaGVkdWxlckludGVybmFsKSA9PiB7XG4gICAgICAgICAgdGhpcy5tb2RlbCA9IHJlc3BvbnNlO1xuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBQb1BhZ2VKb2JTY2hlZHVsZXJJbnRlcm5hbCgpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXJrQXNEaXJ0eUludmFsaWRDb250cm9scyhjb250cm9sczogeyBba2V5OiBzdHJpbmddOiBBYnN0cmFjdENvbnRyb2wgfSkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbnRyb2xzKSB7XG4gICAgICBpZiAoY29udHJvbHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb25zdCBjb250cm9sID0gY29udHJvbHNba2V5XTtcblxuICAgICAgICBpZiAoY29udHJvbC5pbnZhbGlkKSB7XG4gICAgICAgICAgY29udHJvbC5tYXJrQXNEaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=
import { __decorate, __metadata } from "tslib";
import { EventEmitter, Input, Output, ViewChild, Directive } from '@angular/core';
import { InputBoolean, PoLanguageService, PoModalComponent } from '@po-ui/ng-components';
import { poLocaleDefault } from '../../../utils/util';
export const poAdvancedFiltersLiteralsDefault = {
    en: {
        title: 'Advanced search',
        cancelLabel: 'Cancel',
        confirmLabel: 'Apply filters'
    },
    es: {
        title: 'Búsqueda avanzada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    pt: {
        title: 'Busca avançada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    },
    ru: {
        title: 'Расширенный поиск',
        cancelLabel: 'отменить',
        confirmLabel: 'Применить фильтры'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
export class PoAdvancedFilterBaseComponent {
    constructor(languageService) {
        this._filters = [];
        this.filter = {};
        this.language = poLocaleDefault;
        this.primaryAction = {
            action: () => {
                const models = this.getValuesFromForm();
                this.searchEvent.emit(models);
                this.poModal.close();
            },
            label: this.literals.confirmLabel
        };
        this.secondaryAction = {
            action: () => {
                this.poModal.close();
            },
            label: this.literals.cancelLabel
        };
        /**
         * Mantém na modal de busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         */
        this.keepFilters = false;
        /** Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar. */
        this.searchEvent = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * Coleção de objetos que implementam a interface PoPageDynamicSearchFilters, para definição dos campos que serão criados
     * dinamicamente.
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    get filters() {
        return this._filters;
    }
    /** Objeto com as literais usadas no `po-advanced-filter`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poAdvancedFiltersLiteralsDefault[poLocaleDefault]), poAdvancedFiltersLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poAdvancedFiltersLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.confirmLabel;
        this.secondaryAction.label = this.literals.cancelLabel;
    }
    get literals() {
        return this._literals || poAdvancedFiltersLiteralsDefault[this.language];
    }
    // Retorna os models dos campos preenchidos
    getValuesFromForm() {
        Object.keys(this.filter).forEach(property => {
            if (this.filter[property] === undefined || this.filter[property] === '') {
                delete this.filter[property];
            }
        });
        return this.filter;
    }
}
PoAdvancedFilterBaseComponent.decorators = [
    { type: Directive }
];
PoAdvancedFilterBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoAdvancedFilterBaseComponent.propDecorators = {
    poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    keepFilters: [{ type: Input, args: ['p-keep-filters',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    searchEvent: [{ type: Output, args: ['p-search-event',] }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Boolean)
], PoAdvancedFilterBaseComponent.prototype, "keepFilters", void 0);
//# sourceMappingURL=data:application/json;base64,